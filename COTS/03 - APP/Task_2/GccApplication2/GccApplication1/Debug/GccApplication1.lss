
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000071a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000071a  0000078e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ffd  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000608  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000701  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000095b  00000000  00000000  00002f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 24 02 	call	0x448	; 0x448 <main>
  7a:	0c 94 8b 03 	jmp	0x716	; 0x716 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
DIO_tenuErrorStatus DIO_enuInit(void)
{
	u8 i;
	u8 Local_u8PortNumber = 0;
	u8 Local_u8PinNumber  = 0;
	for(i = 0 ; i < DIO_enuNumberOfPins ; i++)
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	d4 c0       	rjmp	.+424    	; 0x22e <DIO_enuInit+0x1ac>
	{
		Local_u8PortNumber = i/NumberOfPin;
  86:	98 2f       	mov	r25, r24
  88:	96 95       	lsr	r25
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
		Local_u8PinNumber = i%NumberOfPin;
  8e:	28 2f       	mov	r18, r24
  90:	27 70       	andi	r18, 0x07	; 7
		switch (Local_u8PortNumber)
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	c9 f1       	breq	.+114    	; 0x108 <DIO_enuInit+0x86>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_enuInit+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_enuInit+0x1c>
  9c:	66 c0       	rjmp	.+204    	; 0x16a <DIO_enuInit+0xe8>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_enuInit+0x22>
  a2:	94 c0       	rjmp	.+296    	; 0x1cc <DIO_enuInit+0x14a>
  a4:	c3 c0       	rjmp	.+390    	; 0x22c <DIO_enuInit+0x1aa>
		{
			case(DIO_PORTA):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
  a6:	48 2f       	mov	r20, r24
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	fa 01       	movw	r30, r20
  ac:	ee 0f       	add	r30, r30
  ae:	ff 1f       	adc	r31, r31
  b0:	e0 5a       	subi	r30, 0xA0	; 160
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	90 81       	ld	r25, Z
  b6:	91 30       	cpi	r25, 0x01	; 1
  b8:	69 f4       	brne	.+26     	; 0xd4 <DIO_enuInit+0x52>
			{
				SET_BIT(DDRA,Local_u8PinNumber);
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	ba 01       	movw	r22, r20
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_enuInit+0x46>
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_enuInit+0x42>
  cc:	9b 01       	movw	r18, r22
  ce:	29 2b       	or	r18, r25
  d0:	2a bb       	out	0x1a, r18	; 26
  d2:	ac c0       	rjmp	.+344    	; 0x22c <DIO_enuInit+0x1aa>
			}
			else
			{
				CLR_BIT(DDRA,Local_u8PinNumber);
  d4:	9a b3       	in	r25, 0x1a	; 26
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	fb 01       	movw	r30, r22
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_enuInit+0x60>
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_enuInit+0x5c>
  e6:	9f 01       	movw	r18, r30
  e8:	6e 2f       	mov	r22, r30
  ea:	60 95       	com	r22
  ec:	96 23       	and	r25, r22
  ee:	9a bb       	out	0x1a, r25	; 26
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	fa 01       	movw	r30, r20
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	91 11       	cpse	r25, r1
  fe:	96 c0       	rjmp	.+300    	; 0x22c <DIO_enuInit+0x1aa>
				{
					SET_BIT(PORTA,Local_u8PinNumber);
 100:	9b b3       	in	r25, 0x1b	; 27
 102:	29 2b       	or	r18, r25
 104:	2b bb       	out	0x1b, r18	; 27
 106:	92 c0       	rjmp	.+292    	; 0x22c <DIO_enuInit+0x1aa>
				}
			}
			break;
			case(DIO_PORTB):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
 108:	48 2f       	mov	r20, r24
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	fa 01       	movw	r30, r20
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	90 81       	ld	r25, Z
 118:	91 30       	cpi	r25, 0x01	; 1
 11a:	69 f4       	brne	.+26     	; 0x136 <DIO_enuInit+0xb4>
			{
				SET_BIT(DDRB,Local_u8PinNumber);
 11c:	97 b3       	in	r25, 0x17	; 23
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	ba 01       	movw	r22, r20
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_enuInit+0xa8>
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_enuInit+0xa4>
 12e:	9b 01       	movw	r18, r22
 130:	29 2b       	or	r18, r25
 132:	27 bb       	out	0x17, r18	; 23
 134:	7b c0       	rjmp	.+246    	; 0x22c <DIO_enuInit+0x1aa>
			}
			else
			{
				CLR_BIT(DDRB,Local_u8PinNumber);
 136:	97 b3       	in	r25, 0x17	; 23
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	fb 01       	movw	r30, r22
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_enuInit+0xc2>
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	2a 95       	dec	r18
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_enuInit+0xbe>
 148:	9f 01       	movw	r18, r30
 14a:	6e 2f       	mov	r22, r30
 14c:	60 95       	com	r22
 14e:	96 23       	and	r25, r22
 150:	97 bb       	out	0x17, r25	; 23
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	fa 01       	movw	r30, r20
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	91 11       	cpse	r25, r1
 160:	65 c0       	rjmp	.+202    	; 0x22c <DIO_enuInit+0x1aa>
				{
					SET_BIT(PORTB,Local_u8PinNumber);
 162:	98 b3       	in	r25, 0x18	; 24
 164:	29 2b       	or	r18, r25
 166:	28 bb       	out	0x18, r18	; 24
 168:	61 c0       	rjmp	.+194    	; 0x22c <DIO_enuInit+0x1aa>
				}
			}
			break;
			case(DIO_PORTC):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
 16a:	48 2f       	mov	r20, r24
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	fa 01       	movw	r30, r20
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e0 5a       	subi	r30, 0xA0	; 160
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	90 81       	ld	r25, Z
 17a:	91 30       	cpi	r25, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_enuInit+0x116>
			{
				SET_BIT(DDRC,Local_u8PinNumber);
 17e:	94 b3       	in	r25, 0x14	; 20
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	ba 01       	movw	r22, r20
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_enuInit+0x10a>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_enuInit+0x106>
 190:	9b 01       	movw	r18, r22
 192:	29 2b       	or	r18, r25
 194:	24 bb       	out	0x14, r18	; 20
 196:	4a c0       	rjmp	.+148    	; 0x22c <DIO_enuInit+0x1aa>
			}
			else
			{
				CLR_BIT(DDRC,Local_u8PinNumber);
 198:	94 b3       	in	r25, 0x14	; 20
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	fb 01       	movw	r30, r22
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_enuInit+0x124>
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_enuInit+0x120>
 1aa:	9f 01       	movw	r18, r30
 1ac:	6e 2f       	mov	r22, r30
 1ae:	60 95       	com	r22
 1b0:	96 23       	and	r25, r22
 1b2:	94 bb       	out	0x14, r25	; 20
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	fa 01       	movw	r30, r20
 1ba:	e0 5a       	subi	r30, 0xA0	; 160
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	91 11       	cpse	r25, r1
 1c2:	34 c0       	rjmp	.+104    	; 0x22c <DIO_enuInit+0x1aa>
				{
					SET_BIT(PORTC,Local_u8PinNumber);
 1c4:	95 b3       	in	r25, 0x15	; 21
 1c6:	29 2b       	or	r18, r25
 1c8:	25 bb       	out	0x15, r18	; 21
 1ca:	30 c0       	rjmp	.+96     	; 0x22c <DIO_enuInit+0x1aa>
				}
			}
			break;
			case(DIO_PORTD):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
 1cc:	48 2f       	mov	r20, r24
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	fa 01       	movw	r30, r20
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	90 81       	ld	r25, Z
 1dc:	91 30       	cpi	r25, 0x01	; 1
 1de:	69 f4       	brne	.+26     	; 0x1fa <DIO_enuInit+0x178>
			{
				SET_BIT(DDRD,Local_u8PinNumber);
 1e0:	91 b3       	in	r25, 0x11	; 17
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	ba 01       	movw	r22, r20
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_enuInit+0x16c>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_enuInit+0x168>
 1f2:	9b 01       	movw	r18, r22
 1f4:	29 2b       	or	r18, r25
 1f6:	21 bb       	out	0x11, r18	; 17
 1f8:	19 c0       	rjmp	.+50     	; 0x22c <DIO_enuInit+0x1aa>
			}
			else
			{
				CLR_BIT(DDRD,Local_u8PinNumber);
 1fa:	91 b3       	in	r25, 0x11	; 17
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	fb 01       	movw	r30, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_enuInit+0x186>
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_enuInit+0x182>
 20c:	9f 01       	movw	r18, r30
 20e:	6e 2f       	mov	r22, r30
 210:	60 95       	com	r22
 212:	96 23       	and	r25, r22
 214:	91 bb       	out	0x11, r25	; 17
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	fa 01       	movw	r30, r20
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	91 11       	cpse	r25, r1
 224:	03 c0       	rjmp	.+6      	; 0x22c <DIO_enuInit+0x1aa>
				{
					SET_BIT(PORTD,Local_u8PinNumber);
 226:	92 b3       	in	r25, 0x12	; 18
 228:	29 2b       	or	r18, r25
 22a:	22 bb       	out	0x12, r18	; 18
DIO_tenuErrorStatus DIO_enuInit(void)
{
	u8 i;
	u8 Local_u8PortNumber = 0;
	u8 Local_u8PinNumber  = 0;
	for(i = 0 ; i < DIO_enuNumberOfPins ; i++)
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 32       	cpi	r24, 0x20	; 32
 230:	08 f4       	brcc	.+2      	; 0x234 <DIO_enuInit+0x1b2>
 232:	29 cf       	rjmp	.-430    	; 0x86 <DIO_enuInit+0x4>
			break;
		}
	}
	return DIO_enuOk;

}
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <DIO_enuGetPin>:

DIO_tenuErrorStatus DIO_enuGetPin(DIO_tPinValue Copy_u8PinNumber ,u8 * Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;

	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS )
 238:	80 32       	cpi	r24, 0x20	; 32
 23a:	08 f0       	brcs	.+2      	; 0x23e <DIO_enuGetPin+0x6>
 23c:	45 c0       	rjmp	.+138    	; 0x2c8 <DIO_enuGetPin+0x90>
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
	}
	else
	{

		u8 Local_u8PortNumber = Copy_u8PinNumber/NumberOfPin;
 23e:	98 2f       	mov	r25, r24
 240:	96 95       	lsr	r25
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
		u8 Local_u8PinNumber = Copy_u8PinNumber%NumberOfPin;
 246:	87 70       	andi	r24, 0x07	; 7

		switch (Local_u8PortNumber)
 248:	91 30       	cpi	r25, 0x01	; 1
 24a:	a1 f0       	breq	.+40     	; 0x274 <DIO_enuGetPin+0x3c>
 24c:	28 f0       	brcs	.+10     	; 0x258 <DIO_enuGetPin+0x20>
 24e:	92 30       	cpi	r25, 0x02	; 2
 250:	f9 f0       	breq	.+62     	; 0x290 <DIO_enuGetPin+0x58>
 252:	93 30       	cpi	r25, 0x03	; 3
 254:	59 f1       	breq	.+86     	; 0x2ac <DIO_enuGetPin+0x74>
 256:	3a c0       	rjmp	.+116    	; 0x2cc <DIO_enuGetPin+0x94>
		{
			case (DIO_PORTA):
			*Add_pu8PinValue = GET_BIT(PINA,Local_u8PinNumber);
 258:	29 b3       	in	r18, 0x19	; 25
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	a9 01       	movw	r20, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_enuGetPin+0x2c>
 260:	55 95       	asr	r21
 262:	47 95       	ror	r20
 264:	8a 95       	dec	r24
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_enuGetPin+0x28>
 268:	ca 01       	movw	r24, r20
 26a:	81 70       	andi	r24, 0x01	; 1
 26c:	fb 01       	movw	r30, r22
 26e:	80 83       	st	Z, r24
//}


DIO_tenuErrorStatus DIO_enuGetPin(DIO_tPinValue Copy_u8PinNumber ,u8 * Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 270:	80 e0       	ldi	r24, 0x00	; 0

		switch (Local_u8PortNumber)
		{
			case (DIO_PORTA):
			*Add_pu8PinValue = GET_BIT(PINA,Local_u8PinNumber);
			break;
 272:	08 95       	ret
			case (DIO_PORTB):
			*Add_pu8PinValue = GET_BIT(PINB,Local_u8PinNumber);
 274:	26 b3       	in	r18, 0x16	; 22
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	a9 01       	movw	r20, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_enuGetPin+0x48>
 27c:	55 95       	asr	r21
 27e:	47 95       	ror	r20
 280:	8a 95       	dec	r24
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_enuGetPin+0x44>
 284:	ca 01       	movw	r24, r20
 286:	81 70       	andi	r24, 0x01	; 1
 288:	fb 01       	movw	r30, r22
 28a:	80 83       	st	Z, r24
//}


DIO_tenuErrorStatus DIO_enuGetPin(DIO_tPinValue Copy_u8PinNumber ,u8 * Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 28c:	80 e0       	ldi	r24, 0x00	; 0
			case (DIO_PORTA):
			*Add_pu8PinValue = GET_BIT(PINA,Local_u8PinNumber);
			break;
			case (DIO_PORTB):
			*Add_pu8PinValue = GET_BIT(PINB,Local_u8PinNumber);
			break;
 28e:	08 95       	ret
			case (DIO_PORTC):
			*Add_pu8PinValue = GET_BIT(PINC,Local_u8PinNumber);
 290:	23 b3       	in	r18, 0x13	; 19
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	a9 01       	movw	r20, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_enuGetPin+0x64>
 298:	55 95       	asr	r21
 29a:	47 95       	ror	r20
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_enuGetPin+0x60>
 2a0:	ca 01       	movw	r24, r20
 2a2:	81 70       	andi	r24, 0x01	; 1
 2a4:	fb 01       	movw	r30, r22
 2a6:	80 83       	st	Z, r24
//}


DIO_tenuErrorStatus DIO_enuGetPin(DIO_tPinValue Copy_u8PinNumber ,u8 * Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
			case (DIO_PORTB):
			*Add_pu8PinValue = GET_BIT(PINB,Local_u8PinNumber);
			break;
			case (DIO_PORTC):
			*Add_pu8PinValue = GET_BIT(PINC,Local_u8PinNumber);
			break;
 2aa:	08 95       	ret
			case (DIO_PORTD):
			*Add_pu8PinValue = GET_BIT(PIND,Local_u8PinNumber);
 2ac:	20 b3       	in	r18, 0x10	; 16
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	a9 01       	movw	r20, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_enuGetPin+0x80>
 2b4:	55 95       	asr	r21
 2b6:	47 95       	ror	r20
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_enuGetPin+0x7c>
 2bc:	ca 01       	movw	r24, r20
 2be:	81 70       	andi	r24, 0x01	; 1
 2c0:	fb 01       	movw	r30, r22
 2c2:	80 83       	st	Z, r24
//}


DIO_tenuErrorStatus DIO_enuGetPin(DIO_tPinValue Copy_u8PinNumber ,u8 * Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
			case (DIO_PORTC):
			*Add_pu8PinValue = GET_BIT(PINC,Local_u8PinNumber);
			break;
			case (DIO_PORTD):
			*Add_pu8PinValue = GET_BIT(PIND,Local_u8PinNumber);
			break;
 2c6:	08 95       	ret
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;

	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS )
	{
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	08 95       	ret
			break;
			case (DIO_PORTD):
			*Add_pu8PinValue = GET_BIT(PIND,Local_u8PinNumber);
			break;
			default:
			Local_u8ErrorStatus = DIO_enuNotOk;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
		
	}


	return Local_u8ErrorStatus;
}
 2ce:	08 95       	ret

000002d0 <DIO_enuSetPin>:


DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS)
 2d0:	80 32       	cpi	r24, 0x20	; 32
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_enuSetPin+0x6>
 2d4:	8b c0       	rjmp	.+278    	; 0x3ec <DIO_enuSetPin+0x11c>
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
	}
	else
	{

		u8 Local_u8PortNumber = Copy_u8PinNumber/NumberOfPin;
 2d6:	98 2f       	mov	r25, r24
 2d8:	96 95       	lsr	r25
 2da:	96 95       	lsr	r25
 2dc:	96 95       	lsr	r25
		u8 Local_u8PinNumber = Copy_u8PinNumber%NumberOfPin;
 2de:	87 70       	andi	r24, 0x07	; 7

		switch (Local_u8PortNumber)
 2e0:	91 30       	cpi	r25, 0x01	; 1
 2e2:	39 f1       	breq	.+78     	; 0x332 <DIO_enuSetPin+0x62>
 2e4:	38 f0       	brcs	.+14     	; 0x2f4 <DIO_enuSetPin+0x24>
 2e6:	92 30       	cpi	r25, 0x02	; 2
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_enuSetPin+0x1c>
 2ea:	42 c0       	rjmp	.+132    	; 0x370 <DIO_enuSetPin+0xa0>
 2ec:	93 30       	cpi	r25, 0x03	; 3
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <DIO_enuSetPin+0x22>
 2f0:	5e c0       	rjmp	.+188    	; 0x3ae <DIO_enuSetPin+0xde>
 2f2:	7e c0       	rjmp	.+252    	; 0x3f0 <DIO_enuSetPin+0x120>
		{
			case (DIO_PORTA):
			if( Copy_enuPinValue == DIO_enuHigh )
 2f4:	61 30       	cpi	r22, 0x01	; 1
 2f6:	71 f4       	brne	.+28     	; 0x314 <DIO_enuSetPin+0x44>
			{
				SET_BIT(PORTA,Local_u8PinNumber);
 2f8:	4b b3       	in	r20, 0x1b	; 27
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	b9 01       	movw	r22, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_enuSetPin+0x36>
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	8a 95       	dec	r24
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_enuSetPin+0x32>
 30a:	cb 01       	movw	r24, r22
 30c:	84 2b       	or	r24, r20
 30e:	8b bb       	out	0x1b, r24	; 27



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
			{
				SET_BIT(PORTA,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTA,Local_u8PinNumber);
 314:	4b b3       	in	r20, 0x1b	; 27
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_enuSetPin+0x52>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_enuSetPin+0x4e>
 326:	cb 01       	movw	r24, r22
 328:	80 95       	com	r24
 32a:	84 23       	and	r24, r20
 32c:	8b bb       	out	0x1b, r24	; 27



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret
				CLR_BIT(PORTA,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTB):

			if( Copy_enuPinValue == DIO_enuHigh )
 332:	61 30       	cpi	r22, 0x01	; 1
 334:	71 f4       	brne	.+28     	; 0x352 <DIO_enuSetPin+0x82>
			{
				SET_BIT(PORTB,Local_u8PinNumber);
 336:	48 b3       	in	r20, 0x18	; 24
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_enuSetPin+0x74>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_enuSetPin+0x70>
 348:	cb 01       	movw	r24, r22
 34a:	84 2b       	or	r24, r20
 34c:	88 bb       	out	0x18, r24	; 24



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
			{
				SET_BIT(PORTB,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTB,Local_u8PinNumber);
 352:	48 b3       	in	r20, 0x18	; 24
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_enuSetPin+0x90>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	8a 95       	dec	r24
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_enuSetPin+0x8c>
 364:	cb 01       	movw	r24, r22
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	88 bb       	out	0x18, r24	; 24



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret
			{
				CLR_BIT(PORTB,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTC):
			if( Copy_enuPinValue == DIO_enuHigh )
 370:	61 30       	cpi	r22, 0x01	; 1
 372:	71 f4       	brne	.+28     	; 0x390 <DIO_enuSetPin+0xc0>
			{
				SET_BIT(PORTC,Local_u8PinNumber);
 374:	45 b3       	in	r20, 0x15	; 21
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	b9 01       	movw	r22, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_enuSetPin+0xb2>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	8a 95       	dec	r24
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_enuSetPin+0xae>
 386:	cb 01       	movw	r24, r22
 388:	84 2b       	or	r24, r20
 38a:	85 bb       	out	0x15, r24	; 21



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
			{
				SET_BIT(PORTC,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTC,Local_u8PinNumber);
 390:	45 b3       	in	r20, 0x15	; 21
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	b9 01       	movw	r22, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_enuSetPin+0xce>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	8a 95       	dec	r24
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_enuSetPin+0xca>
 3a2:	cb 01       	movw	r24, r22
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	85 bb       	out	0x15, r24	; 21



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
			{
				CLR_BIT(PORTC,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTD):
			if( Copy_enuPinValue == DIO_enuHigh )
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	71 f4       	brne	.+28     	; 0x3ce <DIO_enuSetPin+0xfe>
			{
				SET_BIT(PORTD,Local_u8PinNumber);
 3b2:	42 b3       	in	r20, 0x12	; 18
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	b9 01       	movw	r22, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_enuSetPin+0xf0>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	8a 95       	dec	r24
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_enuSetPin+0xec>
 3c4:	cb 01       	movw	r24, r22
 3c6:	84 2b       	or	r24, r20
 3c8:	82 bb       	out	0x12, r24	; 18



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
			{
				SET_BIT(PORTD,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTD,Local_u8PinNumber);
 3ce:	42 b3       	in	r20, 0x12	; 18
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	b9 01       	movw	r22, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_enuSetPin+0x10c>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_enuSetPin+0x108>
 3e0:	cb 01       	movw	r24, r22
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	82 bb       	out	0x12, r24	; 18



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS)
	{
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	08 95       	ret
			{
				CLR_BIT(PORTD,Local_u8PinNumber);
			}
			break;
			default:
			Local_u8ErrorStatus = DIO_enuNotOk;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return Local_u8ErrorStatus;

}
 3f2:	08 95       	ret

000003f4 <LED_enuOn>:


DIO_tenuErrorStatus LED_enuOn( DIO_tenuPins Copy_u8PinNumber )
{
    DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
    DIO_enuSetPin( Copy_u8PinNumber , DIO_enuHigh );
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_enuSetPin>

    return Local_u8ErrorStatus;
}
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret

000003fe <LED_enuOff>:

DIO_tenuErrorStatus LED_enuOff( DIO_tenuPins Copy_u8PinNumber )
{
    DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
	
    DIO_enuSetPin( Copy_u8PinNumber , DIO_enuLow );
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_enuSetPin>

    return Local_u8ErrorStatus;
}
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret

00000408 <delay_ms_iti>:


void delay_ms_iti(unsigned long int Copy_Count)
{
	unsigned long int i;
	Copy_Count = (u32)((f32)Copy_Count*((f32)F_CPU/1000000.0)*91.2);
 408:	0e 94 90 02 	call	0x520	; 0x520 <__floatunsisf>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	51 e4       	ldi	r21, 0x41	; 65
 414:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__mulsf3>
 418:	26 e6       	ldi	r18, 0x66	; 102
 41a:	36 e6       	ldi	r19, 0x66	; 102
 41c:	46 eb       	ldi	r20, 0xB6	; 182
 41e:	52 e4       	ldi	r21, 0x42	; 66
 420:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__mulsf3>
 424:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fixunssfsi>
 428:	ab 01       	movw	r20, r22
 42a:	bc 01       	movw	r22, r24
	for ( i = 0 ; i < Copy_Count ; i++ )
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	dc 01       	movw	r26, r24
 432:	04 c0       	rjmp	.+8      	; 0x43c <delay_ms_iti+0x34>
	{

		asm("NOP");
 434:	00 00       	nop

void delay_ms_iti(unsigned long int Copy_Count)
{
	unsigned long int i;
	Copy_Count = (u32)((f32)Copy_Count*((f32)F_CPU/1000000.0)*91.2);
	for ( i = 0 ; i < Copy_Count ; i++ )
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	a1 1d       	adc	r26, r1
 43a:	b1 1d       	adc	r27, r1
 43c:	84 17       	cp	r24, r20
 43e:	95 07       	cpc	r25, r21
 440:	a6 07       	cpc	r26, r22
 442:	b7 07       	cpc	r27, r23
 444:	b8 f3       	brcs	.-18     	; 0x434 <delay_ms_iti+0x2c>
	{

		asm("NOP");
	}
	
}
 446:	08 95       	ret

00000448 <main>:




int main(void)
{
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	00 d0       	rcall	.+0      	; 0x44e <main+0x6>
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 452:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	u8 Local_u8PushButton1 = 0;
 456:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8PushButton2 = 0;
 458:	1a 82       	std	Y+2, r1	; 0x02
	u8 i = 0;
 45a:	10 e0       	ldi	r17, 0x00	; 0
 45c:	2c c0       	rjmp	.+88     	; 0x4b6 <main+0x6e>
    while (1) 
    {

		while(i < 4)
		{
			Switch_enuGetValue(DIO_enuPin26,&Local_u8PushButton1);
 45e:	be 01       	movw	r22, r28
 460:	6f 5f       	subi	r22, 0xFF	; 255
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8a e1       	ldi	r24, 0x1A	; 26
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Switch_enuGetValue>
			Switch_enuGetValue(DIO_enuPin27,&Local_u8PushButton2);
 46c:	be 01       	movw	r22, r28
 46e:	6e 5f       	subi	r22, 0xFE	; 254
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8b e1       	ldi	r24, 0x1B	; 27
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Switch_enuGetValue>
			delay_ms_iti(150);
 47a:	66 e9       	ldi	r22, 0x96	; 150
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 04 02 	call	0x408	; 0x408 <delay_ms_iti>
			if(Local_u8PushButton1)
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	88 23       	and	r24, r24
 48a:	41 f0       	breq	.+16     	; 0x49c <main+0x54>
			{
				
				LED_enuOn(DIO_enuPin28+i);
 48c:	8c e1       	ldi	r24, 0x1C	; 28
 48e:	81 0f       	add	r24, r17
 490:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_enuOn>
				i++;
 494:	1f 5f       	subi	r17, 0xFF	; 255
				if ( i > 3)
 496:	14 30       	cpi	r17, 0x04	; 4
 498:	58 f4       	brcc	.+22     	; 0x4b0 <main+0x68>
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <main+0x6e>
					i = 3;
				}
				break;
				
			}
			if(Local_u8PushButton2)
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	88 23       	and	r24, r24
 4a0:	51 f0       	breq	.+20     	; 0x4b6 <main+0x6e>
			{
				LED_enuOff(DIO_enuPin28+i);
 4a2:	8c e1       	ldi	r24, 0x1C	; 28
 4a4:	81 0f       	add	r24, r17
 4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LED_enuOff>
				i--;
 4aa:	11 50       	subi	r17, 0x01	; 1
				if ( i < 1)
 4ac:	19 f0       	breq	.+6      	; 0x4b4 <main+0x6c>
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <main+0x6e>
				
				LED_enuOn(DIO_enuPin28+i);
				i++;
				if ( i > 3)
				{
					i = 3;
 4b0:	13 e0       	ldi	r17, 0x03	; 3
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <main+0x6e>
			{
				LED_enuOff(DIO_enuPin28+i);
				i--;
				if ( i < 1)
				{
					i = 1;
 4b4:	11 e0       	ldi	r17, 0x01	; 1
	//DIO_enuSetPin(DIO_enuPin21 , DIO_enuHigh);

    while (1) 
    {

		while(i < 4)
 4b6:	14 30       	cpi	r17, 0x04	; 4
 4b8:	90 f2       	brcs	.-92     	; 0x45e <main+0x16>
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <main+0x6e>

000004bc <Switch_enuGetValue>:
#include "DIO_interface.h"
#include "BIT_Math.h"
DIO_tenuErrorStatus Switch_enuGetValue(DIO_tenuPins Switch , u8 * Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_enuOk;
	Local_enuErrorStatus =  DIO_enuGetPin( Switch , Add_pu8PinValue );
 4bc:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_enuGetPin>
	

   return Local_enuErrorStatus;

 4c0:	08 95       	ret

000004c2 <__fixunssfsi>:
 4c2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fp_splitA>
 4c6:	88 f0       	brcs	.+34     	; 0x4ea <__fixunssfsi+0x28>
 4c8:	9f 57       	subi	r25, 0x7F	; 127
 4ca:	98 f0       	brcs	.+38     	; 0x4f2 <__fixunssfsi+0x30>
 4cc:	b9 2f       	mov	r27, r25
 4ce:	99 27       	eor	r25, r25
 4d0:	b7 51       	subi	r27, 0x17	; 23
 4d2:	b0 f0       	brcs	.+44     	; 0x500 <__fixunssfsi+0x3e>
 4d4:	e1 f0       	breq	.+56     	; 0x50e <__fixunssfsi+0x4c>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	1a f0       	brmi	.+6      	; 0x4e6 <__fixunssfsi+0x24>
 4e0:	ba 95       	dec	r27
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__fixunssfsi+0x14>
 4e4:	14 c0       	rjmp	.+40     	; 0x50e <__fixunssfsi+0x4c>
 4e6:	b1 30       	cpi	r27, 0x01	; 1
 4e8:	91 f0       	breq	.+36     	; 0x50e <__fixunssfsi+0x4c>
 4ea:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_zero>
 4ee:	b1 e0       	ldi	r27, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__fp_zero>
 4f6:	67 2f       	mov	r22, r23
 4f8:	78 2f       	mov	r23, r24
 4fa:	88 27       	eor	r24, r24
 4fc:	b8 5f       	subi	r27, 0xF8	; 248
 4fe:	39 f0       	breq	.+14     	; 0x50e <__fixunssfsi+0x4c>
 500:	b9 3f       	cpi	r27, 0xF9	; 249
 502:	cc f3       	brlt	.-14     	; 0x4f6 <__fixunssfsi+0x34>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b3 95       	inc	r27
 50c:	d9 f7       	brne	.-10     	; 0x504 <__fixunssfsi+0x42>
 50e:	3e f4       	brtc	.+14     	; 0x51e <__fixunssfsi+0x5c>
 510:	90 95       	com	r25
 512:	80 95       	com	r24
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	8f 4f       	sbci	r24, 0xFF	; 255
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__floatunsisf>:
 520:	e8 94       	clt
 522:	09 c0       	rjmp	.+18     	; 0x536 <__floatsisf+0x12>

00000524 <__floatsisf>:
 524:	97 fb       	bst	r25, 7
 526:	3e f4       	brtc	.+14     	; 0x536 <__floatsisf+0x12>
 528:	90 95       	com	r25
 52a:	80 95       	com	r24
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	99 23       	and	r25, r25
 538:	a9 f0       	breq	.+42     	; 0x564 <__floatsisf+0x40>
 53a:	f9 2f       	mov	r31, r25
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	bb 27       	eor	r27, r27
 540:	93 95       	inc	r25
 542:	f6 95       	lsr	r31
 544:	87 95       	ror	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b7 95       	ror	r27
 54c:	f1 11       	cpse	r31, r1
 54e:	f8 cf       	rjmp	.-16     	; 0x540 <__floatsisf+0x1c>
 550:	fa f4       	brpl	.+62     	; 0x590 <__floatsisf+0x6c>
 552:	bb 0f       	add	r27, r27
 554:	11 f4       	brne	.+4      	; 0x55a <__floatsisf+0x36>
 556:	60 ff       	sbrs	r22, 0
 558:	1b c0       	rjmp	.+54     	; 0x590 <__floatsisf+0x6c>
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	16 c0       	rjmp	.+44     	; 0x590 <__floatsisf+0x6c>
 564:	88 23       	and	r24, r24
 566:	11 f0       	breq	.+4      	; 0x56c <__floatsisf+0x48>
 568:	96 e9       	ldi	r25, 0x96	; 150
 56a:	11 c0       	rjmp	.+34     	; 0x58e <__floatsisf+0x6a>
 56c:	77 23       	and	r23, r23
 56e:	21 f0       	breq	.+8      	; 0x578 <__floatsisf+0x54>
 570:	9e e8       	ldi	r25, 0x8E	; 142
 572:	87 2f       	mov	r24, r23
 574:	76 2f       	mov	r23, r22
 576:	05 c0       	rjmp	.+10     	; 0x582 <__floatsisf+0x5e>
 578:	66 23       	and	r22, r22
 57a:	71 f0       	breq	.+28     	; 0x598 <__floatsisf+0x74>
 57c:	96 e8       	ldi	r25, 0x86	; 134
 57e:	86 2f       	mov	r24, r22
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	2a f0       	brmi	.+10     	; 0x590 <__floatsisf+0x6c>
 586:	9a 95       	dec	r25
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	da f7       	brpl	.-10     	; 0x586 <__floatsisf+0x62>
 590:	88 0f       	add	r24, r24
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret

0000059a <__fp_split3>:
 59a:	57 fd       	sbrc	r21, 7
 59c:	90 58       	subi	r25, 0x80	; 128
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	59 f0       	breq	.+22     	; 0x5ba <__fp_splitA+0x10>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <__fp_splitA+0x1a>
 5a8:	47 95       	ror	r20

000005aa <__fp_splitA>:
 5aa:	88 0f       	add	r24, r24
 5ac:	97 fb       	bst	r25, 7
 5ae:	99 1f       	adc	r25, r25
 5b0:	61 f0       	breq	.+24     	; 0x5ca <__fp_splitA+0x20>
 5b2:	9f 3f       	cpi	r25, 0xFF	; 255
 5b4:	79 f0       	breq	.+30     	; 0x5d4 <__fp_splitA+0x2a>
 5b6:	87 95       	ror	r24
 5b8:	08 95       	ret
 5ba:	12 16       	cp	r1, r18
 5bc:	13 06       	cpc	r1, r19
 5be:	14 06       	cpc	r1, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	f2 cf       	rjmp	.-28     	; 0x5a8 <__fp_split3+0xe>
 5c4:	46 95       	lsr	r20
 5c6:	f1 df       	rcall	.-30     	; 0x5aa <__fp_splitA>
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <__fp_splitA+0x30>
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	f1 cf       	rjmp	.-30     	; 0x5b6 <__fp_splitA+0xc>
 5d4:	86 95       	lsr	r24
 5d6:	71 05       	cpc	r23, r1
 5d8:	61 05       	cpc	r22, r1
 5da:	08 94       	sec
 5dc:	08 95       	ret

000005de <__fp_zero>:
 5de:	e8 94       	clt

000005e0 <__fp_szero>:
 5e0:	bb 27       	eor	r27, r27
 5e2:	66 27       	eor	r22, r22
 5e4:	77 27       	eor	r23, r23
 5e6:	cb 01       	movw	r24, r22
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__mulsf3>:
 5ec:	0e 94 09 03 	call	0x612	; 0x612 <__mulsf3x>
 5f0:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_round>
 5f4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_pscA>
 5f8:	38 f0       	brcs	.+14     	; 0x608 <__mulsf3+0x1c>
 5fa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fp_pscB>
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__mulsf3+0x1c>
 600:	95 23       	and	r25, r21
 602:	11 f0       	breq	.+4      	; 0x608 <__mulsf3+0x1c>
 604:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_inf>
 608:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_nan>
 60c:	11 24       	eor	r1, r1
 60e:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_szero>

00000612 <__mulsf3x>:
 612:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_split3>
 616:	70 f3       	brcs	.-36     	; 0x5f4 <__mulsf3+0x8>

00000618 <__mulsf3_pse>:
 618:	95 9f       	mul	r25, r21
 61a:	c1 f3       	breq	.-16     	; 0x60c <__mulsf3+0x20>
 61c:	95 0f       	add	r25, r21
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	55 1f       	adc	r21, r21
 622:	62 9f       	mul	r22, r18
 624:	f0 01       	movw	r30, r0
 626:	72 9f       	mul	r23, r18
 628:	bb 27       	eor	r27, r27
 62a:	f0 0d       	add	r31, r0
 62c:	b1 1d       	adc	r27, r1
 62e:	63 9f       	mul	r22, r19
 630:	aa 27       	eor	r26, r26
 632:	f0 0d       	add	r31, r0
 634:	b1 1d       	adc	r27, r1
 636:	aa 1f       	adc	r26, r26
 638:	64 9f       	mul	r22, r20
 63a:	66 27       	eor	r22, r22
 63c:	b0 0d       	add	r27, r0
 63e:	a1 1d       	adc	r26, r1
 640:	66 1f       	adc	r22, r22
 642:	82 9f       	mul	r24, r18
 644:	22 27       	eor	r18, r18
 646:	b0 0d       	add	r27, r0
 648:	a1 1d       	adc	r26, r1
 64a:	62 1f       	adc	r22, r18
 64c:	73 9f       	mul	r23, r19
 64e:	b0 0d       	add	r27, r0
 650:	a1 1d       	adc	r26, r1
 652:	62 1f       	adc	r22, r18
 654:	83 9f       	mul	r24, r19
 656:	a0 0d       	add	r26, r0
 658:	61 1d       	adc	r22, r1
 65a:	22 1f       	adc	r18, r18
 65c:	74 9f       	mul	r23, r20
 65e:	33 27       	eor	r19, r19
 660:	a0 0d       	add	r26, r0
 662:	61 1d       	adc	r22, r1
 664:	23 1f       	adc	r18, r19
 666:	84 9f       	mul	r24, r20
 668:	60 0d       	add	r22, r0
 66a:	21 1d       	adc	r18, r1
 66c:	82 2f       	mov	r24, r18
 66e:	76 2f       	mov	r23, r22
 670:	6a 2f       	mov	r22, r26
 672:	11 24       	eor	r1, r1
 674:	9f 57       	subi	r25, 0x7F	; 127
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	9a f0       	brmi	.+38     	; 0x6a0 <__mulsf3_pse+0x88>
 67a:	f1 f0       	breq	.+60     	; 0x6b8 <__mulsf3_pse+0xa0>
 67c:	88 23       	and	r24, r24
 67e:	4a f0       	brmi	.+18     	; 0x692 <__mulsf3_pse+0x7a>
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	bb 1f       	adc	r27, r27
 686:	66 1f       	adc	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	91 50       	subi	r25, 0x01	; 1
 68e:	50 40       	sbci	r21, 0x00	; 0
 690:	a9 f7       	brne	.-22     	; 0x67c <__mulsf3_pse+0x64>
 692:	9e 3f       	cpi	r25, 0xFE	; 254
 694:	51 05       	cpc	r21, r1
 696:	80 f0       	brcs	.+32     	; 0x6b8 <__mulsf3_pse+0xa0>
 698:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_inf>
 69c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_szero>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	e4 f3       	brlt	.-8      	; 0x69c <__mulsf3_pse+0x84>
 6a4:	98 3e       	cpi	r25, 0xE8	; 232
 6a6:	d4 f3       	brlt	.-12     	; 0x69c <__mulsf3_pse+0x84>
 6a8:	86 95       	lsr	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	b7 95       	ror	r27
 6b0:	f7 95       	ror	r31
 6b2:	e7 95       	ror	r30
 6b4:	9f 5f       	subi	r25, 0xFF	; 255
 6b6:	c1 f7       	brne	.-16     	; 0x6a8 <__mulsf3_pse+0x90>
 6b8:	fe 2b       	or	r31, r30
 6ba:	88 0f       	add	r24, r24
 6bc:	91 1d       	adc	r25, r1
 6be:	96 95       	lsr	r25
 6c0:	87 95       	ror	r24
 6c2:	97 f9       	bld	r25, 7
 6c4:	08 95       	ret

000006c6 <__fp_inf>:
 6c6:	97 f9       	bld	r25, 7
 6c8:	9f 67       	ori	r25, 0x7F	; 127
 6ca:	80 e8       	ldi	r24, 0x80	; 128
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	08 95       	ret

000006d2 <__fp_nan>:
 6d2:	9f ef       	ldi	r25, 0xFF	; 255
 6d4:	80 ec       	ldi	r24, 0xC0	; 192
 6d6:	08 95       	ret

000006d8 <__fp_pscA>:
 6d8:	00 24       	eor	r0, r0
 6da:	0a 94       	dec	r0
 6dc:	16 16       	cp	r1, r22
 6de:	17 06       	cpc	r1, r23
 6e0:	18 06       	cpc	r1, r24
 6e2:	09 06       	cpc	r0, r25
 6e4:	08 95       	ret

000006e6 <__fp_pscB>:
 6e6:	00 24       	eor	r0, r0
 6e8:	0a 94       	dec	r0
 6ea:	12 16       	cp	r1, r18
 6ec:	13 06       	cpc	r1, r19
 6ee:	14 06       	cpc	r1, r20
 6f0:	05 06       	cpc	r0, r21
 6f2:	08 95       	ret

000006f4 <__fp_round>:
 6f4:	09 2e       	mov	r0, r25
 6f6:	03 94       	inc	r0
 6f8:	00 0c       	add	r0, r0
 6fa:	11 f4       	brne	.+4      	; 0x700 <__fp_round+0xc>
 6fc:	88 23       	and	r24, r24
 6fe:	52 f0       	brmi	.+20     	; 0x714 <__fp_round+0x20>
 700:	bb 0f       	add	r27, r27
 702:	40 f4       	brcc	.+16     	; 0x714 <__fp_round+0x20>
 704:	bf 2b       	or	r27, r31
 706:	11 f4       	brne	.+4      	; 0x70c <__fp_round+0x18>
 708:	60 ff       	sbrs	r22, 0
 70a:	04 c0       	rjmp	.+8      	; 0x714 <__fp_round+0x20>
 70c:	6f 5f       	subi	r22, 0xFF	; 255
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	08 95       	ret

00000716 <_exit>:
 716:	f8 94       	cli

00000718 <__stop_program>:
 718:	ff cf       	rjmp	.-2      	; 0x718 <__stop_program>
