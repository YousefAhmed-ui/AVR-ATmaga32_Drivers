
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000560  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001070  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000968  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076b  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  000028b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008a3  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b16  00000000  00000000  00003283  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00003d99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8b 02 	call	0x516	; 0x516 <main>
  7a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
		}
	}
	
	return Local_u8ErrorStatus;

}
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	d4 c0       	rjmp	.+424    	; 0x22e <DIO_enuInit+0x1ac>
  86:	98 2f       	mov	r25, r24
  88:	96 95       	lsr	r25
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
  8e:	28 2f       	mov	r18, r24
  90:	27 70       	andi	r18, 0x07	; 7
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	c9 f1       	breq	.+114    	; 0x108 <DIO_enuInit+0x86>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_enuInit+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_enuInit+0x1c>
  9c:	66 c0       	rjmp	.+204    	; 0x16a <DIO_enuInit+0xe8>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_enuInit+0x22>
  a2:	94 c0       	rjmp	.+296    	; 0x1cc <DIO_enuInit+0x14a>
  a4:	c3 c0       	rjmp	.+390    	; 0x22c <DIO_enuInit+0x1aa>
  a6:	48 2f       	mov	r20, r24
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	fa 01       	movw	r30, r20
  ac:	ee 0f       	add	r30, r30
  ae:	ff 1f       	adc	r31, r31
  b0:	e0 5a       	subi	r30, 0xA0	; 160
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	90 81       	ld	r25, Z
  b6:	91 30       	cpi	r25, 0x01	; 1
  b8:	69 f4       	brne	.+26     	; 0xd4 <DIO_enuInit+0x52>
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	ba 01       	movw	r22, r20
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_enuInit+0x46>
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_enuInit+0x42>
  cc:	9b 01       	movw	r18, r22
  ce:	29 2b       	or	r18, r25
  d0:	2a bb       	out	0x1a, r18	; 26
  d2:	ac c0       	rjmp	.+344    	; 0x22c <DIO_enuInit+0x1aa>
  d4:	9a b3       	in	r25, 0x1a	; 26
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	fb 01       	movw	r30, r22
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_enuInit+0x60>
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_enuInit+0x5c>
  e6:	9f 01       	movw	r18, r30
  e8:	6e 2f       	mov	r22, r30
  ea:	60 95       	com	r22
  ec:	96 23       	and	r25, r22
  ee:	9a bb       	out	0x1a, r25	; 26
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	fa 01       	movw	r30, r20
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	91 11       	cpse	r25, r1
  fe:	96 c0       	rjmp	.+300    	; 0x22c <DIO_enuInit+0x1aa>
 100:	9b b3       	in	r25, 0x1b	; 27
 102:	29 2b       	or	r18, r25
 104:	2b bb       	out	0x1b, r18	; 27
 106:	92 c0       	rjmp	.+292    	; 0x22c <DIO_enuInit+0x1aa>
 108:	48 2f       	mov	r20, r24
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	fa 01       	movw	r30, r20
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	90 81       	ld	r25, Z
 118:	91 30       	cpi	r25, 0x01	; 1
 11a:	69 f4       	brne	.+26     	; 0x136 <DIO_enuInit+0xb4>
 11c:	97 b3       	in	r25, 0x17	; 23
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	ba 01       	movw	r22, r20
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_enuInit+0xa8>
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_enuInit+0xa4>
 12e:	9b 01       	movw	r18, r22
 130:	29 2b       	or	r18, r25
 132:	27 bb       	out	0x17, r18	; 23
 134:	7b c0       	rjmp	.+246    	; 0x22c <DIO_enuInit+0x1aa>
 136:	97 b3       	in	r25, 0x17	; 23
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	fb 01       	movw	r30, r22
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_enuInit+0xc2>
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	2a 95       	dec	r18
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_enuInit+0xbe>
 148:	9f 01       	movw	r18, r30
 14a:	6e 2f       	mov	r22, r30
 14c:	60 95       	com	r22
 14e:	96 23       	and	r25, r22
 150:	97 bb       	out	0x17, r25	; 23
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	fa 01       	movw	r30, r20
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	91 11       	cpse	r25, r1
 160:	65 c0       	rjmp	.+202    	; 0x22c <DIO_enuInit+0x1aa>
 162:	98 b3       	in	r25, 0x18	; 24
 164:	29 2b       	or	r18, r25
 166:	28 bb       	out	0x18, r18	; 24
 168:	61 c0       	rjmp	.+194    	; 0x22c <DIO_enuInit+0x1aa>
 16a:	48 2f       	mov	r20, r24
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	fa 01       	movw	r30, r20
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e0 5a       	subi	r30, 0xA0	; 160
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	90 81       	ld	r25, Z
 17a:	91 30       	cpi	r25, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_enuInit+0x116>
 17e:	94 b3       	in	r25, 0x14	; 20
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	ba 01       	movw	r22, r20
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_enuInit+0x10a>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_enuInit+0x106>
 190:	9b 01       	movw	r18, r22
 192:	29 2b       	or	r18, r25
 194:	24 bb       	out	0x14, r18	; 20
 196:	4a c0       	rjmp	.+148    	; 0x22c <DIO_enuInit+0x1aa>
 198:	94 b3       	in	r25, 0x14	; 20
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	fb 01       	movw	r30, r22
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_enuInit+0x124>
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_enuInit+0x120>
 1aa:	9f 01       	movw	r18, r30
 1ac:	6e 2f       	mov	r22, r30
 1ae:	60 95       	com	r22
 1b0:	96 23       	and	r25, r22
 1b2:	94 bb       	out	0x14, r25	; 20
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	fa 01       	movw	r30, r20
 1ba:	e0 5a       	subi	r30, 0xA0	; 160
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	91 11       	cpse	r25, r1
 1c2:	34 c0       	rjmp	.+104    	; 0x22c <DIO_enuInit+0x1aa>
 1c4:	95 b3       	in	r25, 0x15	; 21
 1c6:	29 2b       	or	r18, r25
 1c8:	25 bb       	out	0x15, r18	; 21
 1ca:	30 c0       	rjmp	.+96     	; 0x22c <DIO_enuInit+0x1aa>
 1cc:	48 2f       	mov	r20, r24
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	fa 01       	movw	r30, r20
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	90 81       	ld	r25, Z
 1dc:	91 30       	cpi	r25, 0x01	; 1
 1de:	69 f4       	brne	.+26     	; 0x1fa <DIO_enuInit+0x178>
 1e0:	91 b3       	in	r25, 0x11	; 17
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	ba 01       	movw	r22, r20
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_enuInit+0x16c>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_enuInit+0x168>
 1f2:	9b 01       	movw	r18, r22
 1f4:	29 2b       	or	r18, r25
 1f6:	21 bb       	out	0x11, r18	; 17
 1f8:	19 c0       	rjmp	.+50     	; 0x22c <DIO_enuInit+0x1aa>
 1fa:	91 b3       	in	r25, 0x11	; 17
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	fb 01       	movw	r30, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_enuInit+0x186>
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_enuInit+0x182>
 20c:	9f 01       	movw	r18, r30
 20e:	6e 2f       	mov	r22, r30
 210:	60 95       	com	r22
 212:	96 23       	and	r25, r22
 214:	91 bb       	out	0x11, r25	; 17
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	fa 01       	movw	r30, r20
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	91 11       	cpse	r25, r1
 224:	03 c0       	rjmp	.+6      	; 0x22c <DIO_enuInit+0x1aa>
 226:	92 b3       	in	r25, 0x12	; 18
 228:	29 2b       	or	r18, r25
 22a:	22 bb       	out	0x12, r18	; 18
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 32       	cpi	r24, 0x20	; 32
 230:	08 f4       	brcc	.+2      	; 0x234 <DIO_enuInit+0x1b2>
 232:	29 cf       	rjmp	.-430    	; 0x86 <DIO_enuInit+0x4>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <DIO_enuGetPin>:
 238:	80 32       	cpi	r24, 0x20	; 32
 23a:	08 f0       	brcs	.+2      	; 0x23e <DIO_enuGetPin+0x6>
 23c:	45 c0       	rjmp	.+138    	; 0x2c8 <DIO_enuGetPin+0x90>
 23e:	98 2f       	mov	r25, r24
 240:	96 95       	lsr	r25
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
 246:	87 70       	andi	r24, 0x07	; 7
 248:	91 30       	cpi	r25, 0x01	; 1
 24a:	a1 f0       	breq	.+40     	; 0x274 <DIO_enuGetPin+0x3c>
 24c:	28 f0       	brcs	.+10     	; 0x258 <DIO_enuGetPin+0x20>
 24e:	92 30       	cpi	r25, 0x02	; 2
 250:	f9 f0       	breq	.+62     	; 0x290 <DIO_enuGetPin+0x58>
 252:	93 30       	cpi	r25, 0x03	; 3
 254:	59 f1       	breq	.+86     	; 0x2ac <DIO_enuGetPin+0x74>
 256:	3a c0       	rjmp	.+116    	; 0x2cc <DIO_enuGetPin+0x94>
 258:	29 b3       	in	r18, 0x19	; 25
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	a9 01       	movw	r20, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_enuGetPin+0x2c>
 260:	55 95       	asr	r21
 262:	47 95       	ror	r20
 264:	8a 95       	dec	r24
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_enuGetPin+0x28>
 268:	ca 01       	movw	r24, r20
 26a:	81 70       	andi	r24, 0x01	; 1
 26c:	fb 01       	movw	r30, r22
 26e:	80 83       	st	Z, r24
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	08 95       	ret
 274:	26 b3       	in	r18, 0x16	; 22
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	a9 01       	movw	r20, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_enuGetPin+0x48>
 27c:	55 95       	asr	r21
 27e:	47 95       	ror	r20
 280:	8a 95       	dec	r24
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_enuGetPin+0x44>
 284:	ca 01       	movw	r24, r20
 286:	81 70       	andi	r24, 0x01	; 1
 288:	fb 01       	movw	r30, r22
 28a:	80 83       	st	Z, r24
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
 290:	23 b3       	in	r18, 0x13	; 19
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	a9 01       	movw	r20, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_enuGetPin+0x64>
 298:	55 95       	asr	r21
 29a:	47 95       	ror	r20
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_enuGetPin+0x60>
 2a0:	ca 01       	movw	r24, r20
 2a2:	81 70       	andi	r24, 0x01	; 1
 2a4:	fb 01       	movw	r30, r22
 2a6:	80 83       	st	Z, r24
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret
 2ac:	20 b3       	in	r18, 0x10	; 16
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	a9 01       	movw	r20, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_enuGetPin+0x80>
 2b4:	55 95       	asr	r21
 2b6:	47 95       	ror	r20
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_enuGetPin+0x7c>
 2bc:	ca 01       	movw	r24, r20
 2be:	81 70       	andi	r24, 0x01	; 1
 2c0:	fb 01       	movw	r30, r22
 2c2:	80 83       	st	Z, r24
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	08 95       	ret
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	08 95       	ret

000002d0 <DIO_enuSetPin>:
 2d0:	80 32       	cpi	r24, 0x20	; 32
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_enuSetPin+0x6>
 2d4:	8b c0       	rjmp	.+278    	; 0x3ec <DIO_enuSetPin+0x11c>
 2d6:	98 2f       	mov	r25, r24
 2d8:	96 95       	lsr	r25
 2da:	96 95       	lsr	r25
 2dc:	96 95       	lsr	r25
 2de:	87 70       	andi	r24, 0x07	; 7
 2e0:	91 30       	cpi	r25, 0x01	; 1
 2e2:	39 f1       	breq	.+78     	; 0x332 <DIO_enuSetPin+0x62>
 2e4:	38 f0       	brcs	.+14     	; 0x2f4 <DIO_enuSetPin+0x24>
 2e6:	92 30       	cpi	r25, 0x02	; 2
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_enuSetPin+0x1c>
 2ea:	42 c0       	rjmp	.+132    	; 0x370 <DIO_enuSetPin+0xa0>
 2ec:	93 30       	cpi	r25, 0x03	; 3
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <DIO_enuSetPin+0x22>
 2f0:	5e c0       	rjmp	.+188    	; 0x3ae <DIO_enuSetPin+0xde>
 2f2:	7e c0       	rjmp	.+252    	; 0x3f0 <DIO_enuSetPin+0x120>
 2f4:	61 30       	cpi	r22, 0x01	; 1
 2f6:	71 f4       	brne	.+28     	; 0x314 <DIO_enuSetPin+0x44>
 2f8:	4b b3       	in	r20, 0x1b	; 27
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	b9 01       	movw	r22, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_enuSetPin+0x36>
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	8a 95       	dec	r24
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_enuSetPin+0x32>
 30a:	cb 01       	movw	r24, r22
 30c:	84 2b       	or	r24, r20
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
 314:	4b b3       	in	r20, 0x1b	; 27
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_enuSetPin+0x52>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_enuSetPin+0x4e>
 326:	cb 01       	movw	r24, r22
 328:	80 95       	com	r24
 32a:	84 23       	and	r24, r20
 32c:	8b bb       	out	0x1b, r24	; 27
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret
 332:	61 30       	cpi	r22, 0x01	; 1
 334:	71 f4       	brne	.+28     	; 0x352 <DIO_enuSetPin+0x82>
 336:	48 b3       	in	r20, 0x18	; 24
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_enuSetPin+0x74>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_enuSetPin+0x70>
 348:	cb 01       	movw	r24, r22
 34a:	84 2b       	or	r24, r20
 34c:	88 bb       	out	0x18, r24	; 24
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
 352:	48 b3       	in	r20, 0x18	; 24
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_enuSetPin+0x90>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	8a 95       	dec	r24
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_enuSetPin+0x8c>
 364:	cb 01       	movw	r24, r22
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	88 bb       	out	0x18, r24	; 24
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret
 370:	61 30       	cpi	r22, 0x01	; 1
 372:	71 f4       	brne	.+28     	; 0x390 <DIO_enuSetPin+0xc0>
 374:	45 b3       	in	r20, 0x15	; 21
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	b9 01       	movw	r22, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_enuSetPin+0xb2>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	8a 95       	dec	r24
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_enuSetPin+0xae>
 386:	cb 01       	movw	r24, r22
 388:	84 2b       	or	r24, r20
 38a:	85 bb       	out	0x15, r24	; 21
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
 390:	45 b3       	in	r20, 0x15	; 21
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	b9 01       	movw	r22, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_enuSetPin+0xce>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	8a 95       	dec	r24
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_enuSetPin+0xca>
 3a2:	cb 01       	movw	r24, r22
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	85 bb       	out	0x15, r24	; 21
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	71 f4       	brne	.+28     	; 0x3ce <DIO_enuSetPin+0xfe>
 3b2:	42 b3       	in	r20, 0x12	; 18
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	b9 01       	movw	r22, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_enuSetPin+0xf0>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	8a 95       	dec	r24
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_enuSetPin+0xec>
 3c4:	cb 01       	movw	r24, r22
 3c6:	84 2b       	or	r24, r20
 3c8:	82 bb       	out	0x12, r24	; 18
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
 3ce:	42 b3       	in	r20, 0x12	; 18
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	b9 01       	movw	r22, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_enuSetPin+0x10c>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_enuSetPin+0x108>
 3e0:	cb 01       	movw	r24, r22
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	82 bb       	out	0x12, r24	; 18
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	08 95       	ret
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret

000003f4 <DIO_enuSetPort>:
DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;

	 switch (Copy_u8Port)
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	61 f0       	breq	.+24     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f8:	28 f0       	brcs	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	79 f0       	breq	.+30     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	99 f0       	breq	.+38     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 402:	18 c0       	rjmp	.+48     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		{
			case (DIO_PORTA):
			PORTA = 0x00;
 404:	1b ba       	out	0x1b, r1	; 27
			PORTA |= Copy_u8Value;
 406:	8b b3       	in	r24, 0x1b	; 27
 408:	68 2b       	or	r22, r24
 40a:	6b bb       	out	0x1b, r22	; 27


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 40c:	80 e0       	ldi	r24, 0x00	; 0
	 switch (Copy_u8Port)
		{
			case (DIO_PORTA):
			PORTA = 0x00;
			PORTA |= Copy_u8Value;
			break;
 40e:	08 95       	ret
			case (DIO_PORTB):
			PORTB = 0x00;
 410:	18 ba       	out	0x18, r1	; 24
			PORTB |= Copy_u8Value;
 412:	88 b3       	in	r24, 0x18	; 24
 414:	68 2b       	or	r22, r24
 416:	68 bb       	out	0x18, r22	; 24


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 418:	80 e0       	ldi	r24, 0x00	; 0
			PORTA |= Copy_u8Value;
			break;
			case (DIO_PORTB):
			PORTB = 0x00;
			PORTB |= Copy_u8Value;
			break;
 41a:	08 95       	ret
			case (DIO_PORTC):
			PORTC = 0x00;
 41c:	15 ba       	out	0x15, r1	; 21
			PORTC |= Copy_u8Value;
 41e:	85 b3       	in	r24, 0x15	; 21
 420:	68 2b       	or	r22, r24
 422:	65 bb       	out	0x15, r22	; 21


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 424:	80 e0       	ldi	r24, 0x00	; 0
			PORTB |= Copy_u8Value;
			break;
			case (DIO_PORTC):
			PORTC = 0x00;
			PORTC |= Copy_u8Value;
			break;
 426:	08 95       	ret
			case (DIO_PORTD):
			PORTD = 0x00;
 428:	12 ba       	out	0x12, r1	; 18
			PORTD |= Copy_u8Value;
 42a:	82 b3       	in	r24, 0x12	; 18
 42c:	68 2b       	or	r22, r24
 42e:	62 bb       	out	0x12, r22	; 18


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 430:	80 e0       	ldi	r24, 0x00	; 0
			PORTC |= Copy_u8Value;
			break;
			case (DIO_PORTD):
			PORTD = 0x00;
			PORTD |= Copy_u8Value;
			break;
 432:	08 95       	ret
			default:
			Local_u8ErrorStatus = DIO_enuNotOk;
 434:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	return Local_u8ErrorStatus;	

 436:	08 95       	ret

00000438 <KEYPAD_voidInit>:
#include "KEYPAD_private.h"


void KEYPAD_voidInit(void)
{
	DIO_enuSetPin(KEYPAD_COLUMN1,DIO_enuHigh);
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_enuSetPin>
	DIO_enuSetPin(KEYPAD_COLUMN2,DIO_enuHigh);
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_enuSetPin>
	DIO_enuSetPin(KEYPAD_COLUMN3,DIO_enuHigh);
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_enuSetPin>
 450:	08 95       	ret

00000452 <KEYPAD_GetKey>:
	
}


KEYPAD_enuErrorStatus KEYPAD_GetKey(u8 * Add_pKeyPressed)
{
 452:	af 92       	push	r10
 454:	bf 92       	push	r11
 456:	cf 92       	push	r12
 458:	df 92       	push	r13
 45a:	ef 92       	push	r14
 45c:	ff 92       	push	r15
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	1f 92       	push	r1
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8KEYPAD_ARR[ROWS_SIZE][COLUMN_SIZE] = KEYPAD_ARR;
	u8 Local_u8ColumnIndex,Local_u8RowIndix;
	static u8 Local_u8ColumnArr[COLUMN_SIZE] = {KEYPAD_COLUMN1,KEYPAD_COLUMN2,KEYPAD_COLUMN3};
	static u8 Local_u8RowArr[ROWS_SIZE] = {KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
	u8 Local_u8PinValue;
	if( Add_pKeyPressed == NULL )
 46c:	00 97       	sbiw	r24, 0x00	; 0
 46e:	09 f4       	brne	.+2      	; 0x472 <KEYPAD_GetKey+0x20>
 470:	46 c0       	rjmp	.+140    	; 0x4fe <KEYPAD_GetKey+0xac>
 472:	5c 01       	movw	r10, r24
 474:	00 e0       	ldi	r16, 0x00	; 0
 476:	40 c0       	rjmp	.+128    	; 0x4f8 <KEYPAD_GetKey+0xa6>
	}
	else
	{
		for( Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < COLUMN_SIZE ; Local_u8ColumnIndex++ )
		{
			DIO_enuSetPin(Local_u8ColumnArr[Local_u8ColumnIndex],DIO_enuLow);
 478:	c0 2e       	mov	r12, r16
 47a:	d1 2c       	mov	r13, r1
 47c:	f6 01       	movw	r30, r12
 47e:	e4 55       	subi	r30, 0x54	; 84
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_enuSetPin>
			for( Local_u8RowIndix = 0 ; Local_u8RowIndix < ROWS_SIZE ; Local_u8RowIndix++ )
 48a:	10 e0       	ldi	r17, 0x00	; 0
 48c:	2b c0       	rjmp	.+86     	; 0x4e4 <KEYPAD_GetKey+0x92>
			{
				DIO_enuGetPin( Local_u8RowArr[Local_u8RowIndix] , &Local_u8PinValue);
 48e:	e1 2e       	mov	r14, r17
 490:	f1 2c       	mov	r15, r1
 492:	f7 01       	movw	r30, r14
 494:	e7 55       	subi	r30, 0x57	; 87
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	be 01       	movw	r22, r28
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	80 81       	ld	r24, Z
 4a0:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_enuGetPin>
				if(DIO_enuLow == Local_u8PinValue)
 4a4:	99 81       	ldd	r25, Y+1	; 0x01
 4a6:	91 11       	cpse	r25, r1
 4a8:	1c c0       	rjmp	.+56     	; 0x4e2 <KEYPAD_GetKey+0x90>
				{
					*Local_u8KeyPressed = Local_u8KEYPAD_ARR[Local_u8RowIndix][Local_u8ColumnIndex];
 4aa:	c7 01       	movw	r24, r14
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	8e 0d       	add	r24, r14
 4b2:	9f 1d       	adc	r25, r15
 4b4:	80 56       	subi	r24, 0x60	; 96
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	fc 01       	movw	r30, r24
 4ba:	ec 0d       	add	r30, r12
 4bc:	fd 1d       	adc	r31, r13
 4be:	80 81       	ld	r24, Z
 4c0:	f5 01       	movw	r30, r10
 4c2:	80 83       	st	Z, r24
					while(DIO_enuLow == Local_u8PinValue)
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <KEYPAD_GetKey+0x86>
					{
						DIO_enuGetPin( Local_u8RowArr[Local_u8RowIndix] , &Local_u8PinValue);
 4c6:	be 01       	movw	r22, r28
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	f7 01       	movw	r30, r14
 4ce:	e7 55       	subi	r30, 0x57	; 87
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	80 81       	ld	r24, Z
 4d4:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_enuGetPin>
			{
				DIO_enuGetPin( Local_u8RowArr[Local_u8RowIndix] , &Local_u8PinValue);
				if(DIO_enuLow == Local_u8PinValue)
				{
					*Local_u8KeyPressed = Local_u8KEYPAD_ARR[Local_u8RowIndix][Local_u8ColumnIndex];
					while(DIO_enuLow == Local_u8PinValue)
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	88 23       	and	r24, r24
 4dc:	a1 f3       	breq	.-24     	; 0x4c6 <KEYPAD_GetKey+0x74>
					{
						DIO_enuGetPin( Local_u8RowArr[Local_u8RowIndix] , &Local_u8PinValue);
					}
					
					return Local_u8ErrorStatus;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <KEYPAD_GetKey+0xac>
	else
	{
		for( Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < COLUMN_SIZE ; Local_u8ColumnIndex++ )
		{
			DIO_enuSetPin(Local_u8ColumnArr[Local_u8ColumnIndex],DIO_enuLow);
			for( Local_u8RowIndix = 0 ; Local_u8RowIndix < ROWS_SIZE ; Local_u8RowIndix++ )
 4e2:	1f 5f       	subi	r17, 0xFF	; 255
 4e4:	13 30       	cpi	r17, 0x03	; 3
 4e6:	98 f2       	brcs	.-90     	; 0x48e <KEYPAD_GetKey+0x3c>
					
					return Local_u8ErrorStatus;
					
				}
			}
			DIO_enuSetPin(Local_u8ColumnArr[Local_u8ColumnIndex],DIO_enuHigh);
 4e8:	f6 01       	movw	r30, r12
 4ea:	e4 55       	subi	r30, 0x54	; 84
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	80 81       	ld	r24, Z
 4f2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_enuSetPin>
	{
		Local_u8ErrorStatus = KEYPAD_enuNullPtr;
	}
	else
	{
		for( Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < COLUMN_SIZE ; Local_u8ColumnIndex++ )
 4f6:	0f 5f       	subi	r16, 0xFF	; 255
 4f8:	03 30       	cpi	r16, 0x03	; 3
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <KEYPAD_GetKey+0xac>
 4fc:	bd cf       	rjmp	.-134    	; 0x478 <KEYPAD_GetKey+0x26>
			}
			DIO_enuSetPin(Local_u8ColumnArr[Local_u8ColumnIndex],DIO_enuHigh);
			
		}
	}
 4fe:	0f 90       	pop	r0
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	ff 90       	pop	r15
 50a:	ef 90       	pop	r14
 50c:	df 90       	pop	r13
 50e:	cf 90       	pop	r12
 510:	bf 90       	pop	r11
 512:	af 90       	pop	r10
 514:	08 95       	ret

00000516 <main>:




int main(void)
{
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	1f 92       	push	r1
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 520:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	KEYPAD_voidInit();
 524:	0e 94 1c 02 	call	0x438	; 0x438 <KEYPAD_voidInit>
    u8 Local_u8Key = 0xff;
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	89 83       	std	Y+1, r24	; 0x01
    while (1) 
    {
		
		do 
		{
		   KEYPAD_GetKey(&Local_u8Key);
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	0e 94 29 02 	call	0x452	; 0x452 <KEYPAD_GetKey>
		} while (Local_u8Key == 0xff );
 534:	69 81       	ldd	r22, Y+1	; 0x01
 536:	6f 3f       	cpi	r22, 0xFF	; 255
 538:	c9 f3       	breq	.-14     	; 0x52c <main+0x16>
		Sev_Seg_enuDisplay_Num(Sev_Seg_PORTB , Local_u8Key);
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 a1 02 	call	0x542	; 0x542 <Sev_Seg_enuDisplay_Num>
			
		
		
		
			
    }
 540:	f5 cf       	rjmp	.-22     	; 0x52c <main+0x16>

00000542 <Sev_Seg_enuDisplay_Num>:


Sev_Seg_tenuErrorStatus Sev_Seg_enuDisplay_Num( u8 Copy_u8Port , u8 Copy_u8Number)
{
    Sev_Seg_tenuErrorStatus Local_enuErrorStatus = 0;
    if( Copy_u8Port > Sev_Seg_PORT_NUM)
 542:	85 30       	cpi	r24, 0x05	; 5
 544:	48 f4       	brcc	.+18     	; 0x558 <Sev_Seg_enuDisplay_Num+0x16>
    {
        Local_enuErrorStatus = Sev_Seg_enuNotOk; 
    }
    else
    {
    DIO_enuSetPort( Copy_u8Port , Sev_Seg_Nums[Copy_u8Number]);
 546:	e6 2f       	mov	r30, r22
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	e1 55       	subi	r30, 0x51	; 81
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	60 81       	ld	r22, Z
 550:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_enuSetPort>



Sev_Seg_tenuErrorStatus Sev_Seg_enuDisplay_Num( u8 Copy_u8Port , u8 Copy_u8Number)
{
    Sev_Seg_tenuErrorStatus Local_enuErrorStatus = 0;
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	08 95       	ret
    if( Copy_u8Port > Sev_Seg_PORT_NUM)
    {
        Local_enuErrorStatus = Sev_Seg_enuNotOk; 
 558:	81 e0       	ldi	r24, 0x01	; 1
    else
    {
    DIO_enuSetPort( Copy_u8Port , Sev_Seg_Nums[Copy_u8Number]);
    }
    return Local_enuErrorStatus;
 55a:	08 95       	ret

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
