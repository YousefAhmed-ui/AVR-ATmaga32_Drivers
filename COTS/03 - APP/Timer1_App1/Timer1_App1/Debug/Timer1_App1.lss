
Timer1_App1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000d10  00000d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001296  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008db  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d36  00000000  00000000  00002b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  00003838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af4  00000000  00000000  00003d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b99  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00005415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <main>
  8a:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_SelectRef>:
    Local_u8SFIOR = SFIOR;
    Local_u8SFIOR &= SFIOR_TRIGGER_SOURCE_CLEAR_MASK;
    Local_u8SFIOR |= Copy_u8TriggerSource;
    SFIOR = Local_u8SFIOR;
    return Local_u8ErrorStatus;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <adc_SelectRef+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	8b 83       	std	Y+3, r24	; 0x03
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	88 23       	and	r24, r24
  a6:	31 f4       	brne	.+12     	; 0xb4 <adc_SelectRef+0x22>
  a8:	8b 81       	ldd	r24, Y+3	; 0x03
  aa:	80 34       	cpi	r24, 0x40	; 64
  ac:	19 f4       	brne	.+6      	; 0xb4 <adc_SelectRef+0x22>
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	80 3c       	cpi	r24, 0xC0	; 192
  b2:	19 f0       	breq	.+6      	; 0xba <adc_SelectRef+0x28>
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	11 c0       	rjmp	.+34     	; 0xdc <adc_SelectRef+0x4a>
  ba:	87 e2       	ldi	r24, 0x27	; 39
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	8a 83       	std	Y+2, r24	; 0x02
  c4:	8a 81       	ldd	r24, Y+2	; 0x02
  c6:	8f 73       	andi	r24, 0x3F	; 63
  c8:	8a 83       	std	Y+2, r24	; 0x02
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	8b 81       	ldd	r24, Y+3	; 0x03
  ce:	89 2b       	or	r24, r25
  d0:	8a 83       	std	Y+2, r24	; 0x02
  d2:	87 e2       	ldi	r24, 0x27	; 39
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2a 81       	ldd	r18, Y+2	; 0x02
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <adc_SelectAdjustment>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	00 d0       	rcall	.+0      	; 0xf0 <adc_SelectAdjustment+0x6>
  f0:	1f 92       	push	r1
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	8b 83       	std	Y+3, r24	; 0x03
  f8:	19 82       	std	Y+1, r1	; 0x01
  fa:	8b 81       	ldd	r24, Y+3	; 0x03
  fc:	80 32       	cpi	r24, 0x20	; 32
  fe:	19 f4       	brne	.+6      	; 0x106 <adc_SelectAdjustment+0x1c>
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	88 23       	and	r24, r24
 104:	19 f0       	breq	.+6      	; 0x10c <adc_SelectAdjustment+0x22>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	11 c0       	rjmp	.+34     	; 0x12e <adc_SelectAdjustment+0x44>
 10c:	87 e2       	ldi	r24, 0x27	; 39
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	80 81       	ld	r24, Z
 114:	8a 83       	std	Y+2, r24	; 0x02
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	8a 83       	std	Y+2, r24	; 0x02
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	89 2b       	or	r24, r25
 122:	8a 83       	std	Y+2, r24	; 0x02
 124:	87 e2       	ldi	r24, 0x27	; 39
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2a 81       	ldd	r18, Y+2	; 0x02
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <adc_SelectChannelSingle>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	00 d0       	rcall	.+0      	; 0x142 <adc_SelectChannelSingle+0x6>
 142:	1f 92       	push	r1
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	8b 83       	std	Y+3, r24	; 0x03
 14a:	19 82       	std	Y+1, r1	; 0x01
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	18 f0       	brcs	.+6      	; 0x158 <adc_SelectChannelSingle+0x1c>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	0c c0       	rjmp	.+24     	; 0x170 <adc_SelectChannelSingle+0x34>
 158:	87 e2       	ldi	r24, 0x27	; 39
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	8a 83       	std	Y+2, r24	; 0x02
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	80 72       	andi	r24, 0x20	; 32
 166:	8a 83       	std	Y+2, r24	; 0x02
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	89 2b       	or	r24, r25
 16e:	8a 83       	std	Y+2, r24	; 0x02
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <adc_Enable>:
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <adc_Enable+0x6>
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	19 82       	std	Y+1, r1	; 0x01
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	80 38       	cpi	r24, 0x80	; 128
 192:	19 f0       	breq	.+6      	; 0x19a <adc_Enable+0x1c>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	89 83       	std	Y+1, r24	; 0x01
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <adc_Enable+0x34>
 19a:	86 e2       	ldi	r24, 0x26	; 38
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	8a 83       	std	Y+2, r24	; 0x02
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	8f 77       	andi	r24, 0x7F	; 127
 1a8:	8a 83       	std	Y+2, r24	; 0x02
 1aa:	9a 81       	ldd	r25, Y+2	; 0x02
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	89 2b       	or	r24, r25
 1b0:	8a 83       	std	Y+2, r24	; 0x02
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <adc_SelectPrescalar>:
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <adc_SelectPrescalar+0x6>
 1c6:	1f 92       	push	r1
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	8b 83       	std	Y+3, r24	; 0x03
 1ce:	19 82       	std	Y+1, r1	; 0x01
 1d0:	86 e2       	ldi	r24, 0x26	; 38
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	8a 83       	std	Y+2, r24	; 0x02
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	88 7f       	andi	r24, 0xF8	; 248
 1de:	8a 83       	std	Y+2, r24	; 0x02
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	89 2b       	or	r24, r25
 1e6:	8a 83       	std	Y+2, r24	; 0x02
 1e8:	86 e2       	ldi	r24, 0x26	; 38
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	2a 81       	ldd	r18, Y+2	; 0x02
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <adc_StartConversion_8Bit>:
ADC_enuErrorStatus_t adc_StartConversion_8Bit( u8 * Copy_u8GetAdcVal )
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	28 97       	sbiw	r28, 0x08	; 8
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	98 87       	std	Y+8, r25	; 0x08
 216:	8f 83       	std	Y+7, r24	; 0x07
    ADC_enuErrorStatus_t Local_u8ErrorStatus = ADC_enuOk;
 218:	1d 82       	std	Y+5, r1	; 0x05
    u8 Local_u8ADCSRA;
    u32 Local_u32TimeOut = 0;
 21a:	19 82       	std	Y+1, r1	; 0x01
 21c:	1a 82       	std	Y+2, r1	; 0x02
 21e:	1b 82       	std	Y+3, r1	; 0x03
 220:	1c 82       	std	Y+4, r1	; 0x04
    Local_u8ADCSRA = ADCSRA;
 222:	86 e2       	ldi	r24, 0x26	; 38
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	8e 83       	std	Y+6, r24	; 0x06
    Local_u8ADCSRA &= adc_CLEAR_CONVERSION_MASK;
 22c:	8e 81       	ldd	r24, Y+6	; 0x06
 22e:	8f 7b       	andi	r24, 0xBF	; 191
 230:	8e 83       	std	Y+6, r24	; 0x06
    Local_u8ADCSRA |= adc_START_CONVERSION_MASK;
 232:	8e 81       	ldd	r24, Y+6	; 0x06
 234:	80 64       	ori	r24, 0x40	; 64
 236:	8e 83       	std	Y+6, r24	; 0x06
    ADCSRA = Local_u8ADCSRA;
 238:	86 e2       	ldi	r24, 0x26	; 38
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	2e 81       	ldd	r18, Y+6	; 0x06
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
    while( (ADCSRA & adc_START_CONVERSION_MASK) && Local_u32TimeOut < 1000 )
 242:	16 c0       	rjmp	.+44     	; 0x270 <adc_StartConversion_8Bit+0x70>
    {
        Local_u32TimeOut++;
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	ab 81       	ldd	r26, Y+3	; 0x03
 24a:	bc 81       	ldd	r27, Y+4	; 0x04
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	a1 1d       	adc	r26, r1
 250:	b1 1d       	adc	r27, r1
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	9a 83       	std	Y+2, r25	; 0x02
 256:	ab 83       	std	Y+3, r26	; 0x03
 258:	bc 83       	std	Y+4, r27	; 0x04
        if(Local_u32TimeOut >= 1000)
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	9a 81       	ldd	r25, Y+2	; 0x02
 25e:	ab 81       	ldd	r26, Y+3	; 0x03
 260:	bc 81       	ldd	r27, Y+4	; 0x04
 262:	88 3e       	cpi	r24, 0xE8	; 232
 264:	93 40       	sbci	r25, 0x03	; 3
 266:	a1 05       	cpc	r26, r1
 268:	b1 05       	cpc	r27, r1
 26a:	10 f0       	brcs	.+4      	; 0x270 <adc_StartConversion_8Bit+0x70>
        {
            Local_u8ErrorStatus = ADC_enuNotOk;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32TimeOut = 0;
    Local_u8ADCSRA = ADCSRA;
    Local_u8ADCSRA &= adc_CLEAR_CONVERSION_MASK;
    Local_u8ADCSRA |= adc_START_CONVERSION_MASK;
    ADCSRA = Local_u8ADCSRA;
    while( (ADCSRA & adc_START_CONVERSION_MASK) && Local_u32TimeOut < 1000 )
 270:	86 e2       	ldi	r24, 0x26	; 38
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	80 74       	andi	r24, 0x40	; 64
 27e:	99 27       	eor	r25, r25
 280:	89 2b       	or	r24, r25
 282:	49 f0       	breq	.+18     	; 0x296 <adc_StartConversion_8Bit+0x96>
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	ab 81       	ldd	r26, Y+3	; 0x03
 28a:	bc 81       	ldd	r27, Y+4	; 0x04
 28c:	88 3e       	cpi	r24, 0xE8	; 232
 28e:	93 40       	sbci	r25, 0x03	; 3
 290:	a1 05       	cpc	r26, r1
 292:	b1 05       	cpc	r27, r1
 294:	b8 f2       	brcs	.-82     	; 0x244 <adc_StartConversion_8Bit+0x44>
        if(Local_u32TimeOut >= 1000)
        {
            Local_u8ErrorStatus = ADC_enuNotOk;
        }
    }
    *Copy_u8GetAdcVal = ADCH;
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	20 81       	ld	r18, Z
 29e:	8f 81       	ldd	r24, Y+7	; 0x07
 2a0:	98 85       	ldd	r25, Y+8	; 0x08
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
        
 2a6:	00 00       	nop
 2a8:	28 96       	adiw	r28, 0x08	; 8
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <DIO_enuInit>:

}DIO_typePORT;


DIO_tenuErrorStatus DIO_enuInit(void)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <DIO_enuInit+0x6>
 2c0:	1f 92       	push	r1
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	u8 Local_u8PortNumber = 0;
 2c6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8PinNumber  = 0;
 2c8:	1b 82       	std	Y+3, r1	; 0x03
	for(i = 0 ; i < DIO_enuNumberOfPins ; i++)
 2ca:	19 82       	std	Y+1, r1	; 0x01
 2cc:	7e c1       	rjmp	.+764    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
	{
		Local_u8PortNumber = i/NumberOfPin;
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	86 95       	lsr	r24
 2d2:	86 95       	lsr	r24
 2d4:	86 95       	lsr	r24
 2d6:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8PinNumber = i%NumberOfPin;
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	87 70       	andi	r24, 0x07	; 7
 2dc:	8b 83       	std	Y+3, r24	; 0x03
		switch (Local_u8PortNumber)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	91 05       	cpc	r25, r1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_enuInit+0x32>
 2ea:	64 c0       	rjmp	.+200    	; 0x3b4 <DIO_enuInit+0xfa>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	91 05       	cpc	r25, r1
 2f0:	1c f4       	brge	.+6      	; 0x2f8 <DIO_enuInit+0x3e>
 2f2:	89 2b       	or	r24, r25
 2f4:	49 f0       	breq	.+18     	; 0x308 <DIO_enuInit+0x4e>
				}
			}
			break;
			default:

			break;
 2f6:	66 c1       	rjmp	.+716    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
	u8 Local_u8PinNumber  = 0;
	for(i = 0 ; i < DIO_enuNumberOfPins ; i++)
	{
		Local_u8PortNumber = i/NumberOfPin;
		Local_u8PinNumber = i%NumberOfPin;
		switch (Local_u8PortNumber)
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	91 05       	cpc	r25, r1
 2fc:	09 f4       	brne	.+2      	; 0x300 <DIO_enuInit+0x46>
 2fe:	b0 c0       	rjmp	.+352    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 300:	03 97       	sbiw	r24, 0x03	; 3
 302:	09 f4       	brne	.+2      	; 0x306 <DIO_enuInit+0x4c>
 304:	03 c1       	rjmp	.+518    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
				}
			}
			break;
			default:

			break;
 306:	5e c1       	rjmp	.+700    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
		Local_u8PortNumber = i/NumberOfPin;
		Local_u8PinNumber = i%NumberOfPin;
		switch (Local_u8PortNumber)
		{
			case(DIO_PORTA):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	88 2f       	mov	r24, r24
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	80 5a       	subi	r24, 0xA0	; 160
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	a9 f4       	brne	.+42     	; 0x348 <DIO_enuInit+0x8e>
			{
				SET_BIT(DDRA,Local_u8PinNumber);
 31e:	8a e3       	ldi	r24, 0x3A	; 58
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	2a e3       	ldi	r18, 0x3A	; 58
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	62 2f       	mov	r22, r18
 32c:	2b 81       	ldd	r18, Y+3	; 0x03
 32e:	42 2f       	mov	r20, r18
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_enuInit+0x82>
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	4a 95       	dec	r20
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_enuInit+0x7e>
 340:	26 2b       	or	r18, r22
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTA,Local_u8PinNumber);
				}
			}
			break;
 346:	37 c1       	rjmp	.+622    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
			{
				SET_BIT(DDRA,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(DDRA,Local_u8PinNumber);
 348:	8a e3       	ldi	r24, 0x3A	; 58
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	2a e3       	ldi	r18, 0x3A	; 58
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	f9 01       	movw	r30, r18
 352:	20 81       	ld	r18, Z
 354:	62 2f       	mov	r22, r18
 356:	2b 81       	ldd	r18, Y+3	; 0x03
 358:	42 2f       	mov	r20, r18
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_enuInit+0xac>
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	4a 95       	dec	r20
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_enuInit+0xa8>
 36a:	20 95       	com	r18
 36c:	26 23       	and	r18, r22
 36e:	fc 01       	movw	r30, r24
 370:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	88 2f       	mov	r24, r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	8f 59       	subi	r24, 0x9F	; 159
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	88 23       	and	r24, r24
 386:	09 f0       	breq	.+2      	; 0x38a <DIO_enuInit+0xd0>
 388:	16 c1       	rjmp	.+556    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
				{
					SET_BIT(PORTA,Local_u8PinNumber);
 38a:	8b e3       	ldi	r24, 0x3B	; 59
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	2b e3       	ldi	r18, 0x3B	; 59
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	62 2f       	mov	r22, r18
 398:	2b 81       	ldd	r18, Y+3	; 0x03
 39a:	42 2f       	mov	r20, r18
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_enuInit+0xee>
 3a4:	22 0f       	add	r18, r18
 3a6:	33 1f       	adc	r19, r19
 3a8:	4a 95       	dec	r20
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_enuInit+0xea>
 3ac:	26 2b       	or	r18, r22
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 83       	st	Z, r18
				}
			}
			break;
 3b2:	01 c1       	rjmp	.+514    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
			case(DIO_PORTB):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	88 2f       	mov	r24, r24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	80 5a       	subi	r24, 0xA0	; 160
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	fc 01       	movw	r30, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	a9 f4       	brne	.+42     	; 0x3f4 <DIO_enuInit+0x13a>
			{
				SET_BIT(DDRB,Local_u8PinNumber);
 3ca:	87 e3       	ldi	r24, 0x37	; 55
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	27 e3       	ldi	r18, 0x37	; 55
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	62 2f       	mov	r22, r18
 3d8:	2b 81       	ldd	r18, Y+3	; 0x03
 3da:	42 2f       	mov	r20, r18
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_enuInit+0x12e>
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	4a 95       	dec	r20
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_enuInit+0x12a>
 3ec:	26 2b       	or	r18, r22
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTB,Local_u8PinNumber);
				}
			}
			break;
 3f2:	e3 c0       	rjmp	.+454    	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
			{
				SET_BIT(DDRB,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(DDRB,Local_u8PinNumber);
 3f4:	87 e3       	ldi	r24, 0x37	; 55
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	27 e3       	ldi	r18, 0x37	; 55
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	f9 01       	movw	r30, r18
 3fe:	20 81       	ld	r18, Z
 400:	62 2f       	mov	r22, r18
 402:	2b 81       	ldd	r18, Y+3	; 0x03
 404:	42 2f       	mov	r20, r18
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	4a 95       	dec	r20
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	20 95       	com	r18
 418:	26 23       	and	r18, r22
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 2f       	mov	r24, r24
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	8f 59       	subi	r24, 0x9F	; 159
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
 430:	88 23       	and	r24, r24
 432:	09 f0       	breq	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 434:	c2 c0       	rjmp	.+388    	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
				{
					SET_BIT(PORTB,Local_u8PinNumber);
 436:	88 e3       	ldi	r24, 0x38	; 56
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	28 e3       	ldi	r18, 0x38	; 56
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	62 2f       	mov	r22, r18
 444:	2b 81       	ldd	r18, Y+3	; 0x03
 446:	42 2f       	mov	r20, r18
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	22 0f       	add	r18, r18
 452:	33 1f       	adc	r19, r19
 454:	4a 95       	dec	r20
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	26 2b       	or	r18, r22
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
				}
			}
			break;
 45e:	ad c0       	rjmp	.+346    	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
			case(DIO_PORTC):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	88 2f       	mov	r24, r24
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	80 5a       	subi	r24, 0xA0	; 160
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	fc 01       	movw	r30, r24
 470:	80 81       	ld	r24, Z
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	a9 f4       	brne	.+42     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			{
				SET_BIT(DDRC,Local_u8PinNumber);
 476:	84 e3       	ldi	r24, 0x34	; 52
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	24 e3       	ldi	r18, 0x34	; 52
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f9 01       	movw	r30, r18
 480:	20 81       	ld	r18, Z
 482:	62 2f       	mov	r22, r18
 484:	2b 81       	ldd	r18, Y+3	; 0x03
 486:	42 2f       	mov	r20, r18
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 490:	22 0f       	add	r18, r18
 492:	33 1f       	adc	r19, r19
 494:	4a 95       	dec	r20
 496:	e2 f7       	brpl	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 498:	26 2b       	or	r18, r22
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTC,Local_u8PinNumber);
				}
			}
			break;
 49e:	8f c0       	rjmp	.+286    	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
			{
				SET_BIT(DDRC,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(DDRC,Local_u8PinNumber);
 4a0:	84 e3       	ldi	r24, 0x34	; 52
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	24 e3       	ldi	r18, 0x34	; 52
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	f9 01       	movw	r30, r18
 4aa:	20 81       	ld	r18, Z
 4ac:	62 2f       	mov	r22, r18
 4ae:	2b 81       	ldd	r18, Y+3	; 0x03
 4b0:	42 2f       	mov	r20, r18
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4ba:	22 0f       	add	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	4a 95       	dec	r20
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	20 95       	com	r18
 4c4:	26 23       	and	r18, r22
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	8f 59       	subi	r24, 0x9F	; 159
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	fc 01       	movw	r30, r24
 4da:	80 81       	ld	r24, Z
 4dc:	88 23       	and	r24, r24
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e0:	6e c0       	rjmp	.+220    	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
				{
					SET_BIT(PORTC,Local_u8PinNumber);
 4e2:	85 e3       	ldi	r24, 0x35	; 53
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	25 e3       	ldi	r18, 0x35	; 53
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	62 2f       	mov	r22, r18
 4f0:	2b 81       	ldd	r18, Y+3	; 0x03
 4f2:	42 2f       	mov	r20, r18
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	4a 95       	dec	r20
 502:	e2 f7       	brpl	.-8      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 504:	26 2b       	or	r18, r22
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
				}
			}
			break;
 50a:	59 c0       	rjmp	.+178    	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
			case(DIO_PORTD):
			if(DIO_strPinConfig[i].DIO_PinDirection == DIO_DIR_OUTPUT)
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	80 5a       	subi	r24, 0xA0	; 160
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	fc 01       	movw	r30, r24
 51c:	80 81       	ld	r24, Z
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	a9 f4       	brne	.+42     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
			{
				SET_BIT(DDRD,Local_u8PinNumber);
 522:	81 e3       	ldi	r24, 0x31	; 49
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	21 e3       	ldi	r18, 0x31	; 49
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	f9 01       	movw	r30, r18
 52c:	20 81       	ld	r18, Z
 52e:	62 2f       	mov	r22, r18
 530:	2b 81       	ldd	r18, Y+3	; 0x03
 532:	42 2f       	mov	r20, r18
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	4a 95       	dec	r20
 542:	e2 f7       	brpl	.-8      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 544:	26 2b       	or	r18, r22
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTD,Local_u8PinNumber);
				}
			}
			break;
 54a:	3b c0       	rjmp	.+118    	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
			{
				SET_BIT(DDRD,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(DDRD,Local_u8PinNumber);
 54c:	81 e3       	ldi	r24, 0x31	; 49
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	21 e3       	ldi	r18, 0x31	; 49
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	f9 01       	movw	r30, r18
 556:	20 81       	ld	r18, Z
 558:	62 2f       	mov	r22, r18
 55a:	2b 81       	ldd	r18, Y+3	; 0x03
 55c:	42 2f       	mov	r20, r18
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 566:	22 0f       	add	r18, r18
 568:	33 1f       	adc	r19, r19
 56a:	4a 95       	dec	r20
 56c:	e2 f7       	brpl	.-8      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 56e:	20 95       	com	r18
 570:	26 23       	and	r18, r22
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	88 2f       	mov	r24, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	8f 59       	subi	r24, 0x9F	; 159
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	fc 01       	movw	r30, r24
 586:	80 81       	ld	r24, Z
 588:	88 23       	and	r24, r24
 58a:	d9 f4       	brne	.+54     	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
				{
					SET_BIT(PORTD,Local_u8PinNumber);
 58c:	82 e3       	ldi	r24, 0x32	; 50
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	22 e3       	ldi	r18, 0x32	; 50
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	f9 01       	movw	r30, r18
 596:	20 81       	ld	r18, Z
 598:	62 2f       	mov	r22, r18
 59a:	2b 81       	ldd	r18, Y+3	; 0x03
 59c:	42 2f       	mov	r20, r18
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	4a 95       	dec	r20
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 5ae:	26 2b       	or	r18, r22
 5b0:	fc 01       	movw	r30, r24
 5b2:	20 83       	st	Z, r18
				}
			}
			break;
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTA,Local_u8PinNumber);
				}
			}
			break;
 5b6:	00 00       	nop
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTB,Local_u8PinNumber);
				}
			}
			break;
 5ba:	00 00       	nop
 5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTC,Local_u8PinNumber);
				}
			}
			break;
 5be:	00 00       	nop
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
				if(DIO_strPinConfig[i].DIO_InputStatus == DIO_INPUT_PULL_UP )
				{
					SET_BIT(PORTD,Local_u8PinNumber);
				}
			}
			break;
 5c2:	00 00       	nop
DIO_tenuErrorStatus DIO_enuInit(void)
{
	u8 i;
	u8 Local_u8PortNumber = 0;
	u8 Local_u8PinNumber  = 0;
	for(i = 0 ; i < DIO_enuNumberOfPins ; i++)
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	89 83       	std	Y+1, r24	; 0x01
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	80 32       	cpi	r24, 0x20	; 32
 5ce:	08 f4       	brcc	.+2      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5d0:	7e ce       	rjmp	.-772    	; 0x2ce <DIO_enuInit+0x14>
			default:

			break;
		}
	}
	return DIO_enuOk;
 5d2:	80 e0       	ldi	r24, 0x00	; 0

}
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <map>:
#include "DIO_interface.h"
#include "util/delay.h"
#include "ADC.h"

s32 map(s32 Copy_s32Inputmin , s32 Copy_s32Inputmax , s32 Copy_s32OutPutmin , s32 Copy_s32OutPutmax , s32 Copy_s32Inputval)
{
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	64 97       	sbiw	r28, 0x14	; 20
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	6d 83       	std	Y+5, r22	; 0x05
 606:	7e 83       	std	Y+6, r23	; 0x06
 608:	8f 83       	std	Y+7, r24	; 0x07
 60a:	98 87       	std	Y+8, r25	; 0x08
 60c:	29 87       	std	Y+9, r18	; 0x09
 60e:	3a 87       	std	Y+10, r19	; 0x0a
 610:	4b 87       	std	Y+11, r20	; 0x0b
 612:	5c 87       	std	Y+12, r21	; 0x0c
 614:	ed 86       	std	Y+13, r14	; 0x0d
 616:	fe 86       	std	Y+14, r15	; 0x0e
 618:	0f 87       	std	Y+15, r16	; 0x0f
 61a:	18 8b       	std	Y+16, r17	; 0x10
 61c:	a9 8a       	std	Y+17, r10	; 0x11
 61e:	ba 8a       	std	Y+18, r11	; 0x12
 620:	cb 8a       	std	Y+19, r12	; 0x13
 622:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Local_s32Inputval  = (Copy_s32OutPutmin + Copy_s32Inputval);
 624:	2d 85       	ldd	r18, Y+13	; 0x0d
 626:	3e 85       	ldd	r19, Y+14	; 0x0e
 628:	4f 85       	ldd	r20, Y+15	; 0x0f
 62a:	58 89       	ldd	r21, Y+16	; 0x10
 62c:	89 a1       	ldd	r24, Y+33	; 0x21
 62e:	9a a1       	ldd	r25, Y+34	; 0x22
 630:	ab a1       	ldd	r26, Y+35	; 0x23
 632:	bc a1       	ldd	r27, Y+36	; 0x24
 634:	82 0f       	add	r24, r18
 636:	93 1f       	adc	r25, r19
 638:	a4 1f       	adc	r26, r20
 63a:	b5 1f       	adc	r27, r21
 63c:	89 83       	std	Y+1, r24	; 0x01
 63e:	9a 83       	std	Y+2, r25	; 0x02
 640:	ab 83       	std	Y+3, r26	; 0x03
 642:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32Inputval *= (Copy_s32OutPutmax - Copy_s32OutPutmin);
 644:	29 89       	ldd	r18, Y+17	; 0x11
 646:	3a 89       	ldd	r19, Y+18	; 0x12
 648:	4b 89       	ldd	r20, Y+19	; 0x13
 64a:	5c 89       	ldd	r21, Y+20	; 0x14
 64c:	8d 85       	ldd	r24, Y+13	; 0x0d
 64e:	9e 85       	ldd	r25, Y+14	; 0x0e
 650:	af 85       	ldd	r26, Y+15	; 0x0f
 652:	b8 89       	ldd	r27, Y+16	; 0x10
 654:	79 01       	movw	r14, r18
 656:	8a 01       	movw	r16, r20
 658:	e8 1a       	sub	r14, r24
 65a:	f9 0a       	sbc	r15, r25
 65c:	0a 0b       	sbc	r16, r26
 65e:	1b 0b       	sbc	r17, r27
 660:	d8 01       	movw	r26, r16
 662:	c7 01       	movw	r24, r14
 664:	29 81       	ldd	r18, Y+1	; 0x01
 666:	3a 81       	ldd	r19, Y+2	; 0x02
 668:	4b 81       	ldd	r20, Y+3	; 0x03
 66a:	5c 81       	ldd	r21, Y+4	; 0x04
 66c:	bc 01       	movw	r22, r24
 66e:	cd 01       	movw	r24, r26
 670:	0e 94 1b 06 	call	0xc36	; 0xc36 <__mulsi3>
 674:	dc 01       	movw	r26, r24
 676:	cb 01       	movw	r24, r22
 678:	89 83       	std	Y+1, r24	; 0x01
 67a:	9a 83       	std	Y+2, r25	; 0x02
 67c:	ab 83       	std	Y+3, r26	; 0x03
 67e:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32Inputval /= (Copy_s32Inputmax -Copy_s32Inputmin);
 680:	29 85       	ldd	r18, Y+9	; 0x09
 682:	3a 85       	ldd	r19, Y+10	; 0x0a
 684:	4b 85       	ldd	r20, Y+11	; 0x0b
 686:	5c 85       	ldd	r21, Y+12	; 0x0c
 688:	8d 81       	ldd	r24, Y+5	; 0x05
 68a:	9e 81       	ldd	r25, Y+6	; 0x06
 68c:	af 81       	ldd	r26, Y+7	; 0x07
 68e:	b8 85       	ldd	r27, Y+8	; 0x08
 690:	28 1b       	sub	r18, r24
 692:	39 0b       	sbc	r19, r25
 694:	4a 0b       	sbc	r20, r26
 696:	5b 0b       	sbc	r21, r27
 698:	89 81       	ldd	r24, Y+1	; 0x01
 69a:	9a 81       	ldd	r25, Y+2	; 0x02
 69c:	ab 81       	ldd	r26, Y+3	; 0x03
 69e:	bc 81       	ldd	r27, Y+4	; 0x04
 6a0:	bc 01       	movw	r22, r24
 6a2:	cd 01       	movw	r24, r26
 6a4:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodsi4>
 6a8:	da 01       	movw	r26, r20
 6aa:	c9 01       	movw	r24, r18
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	9a 83       	std	Y+2, r25	; 0x02
 6b0:	ab 83       	std	Y+3, r26	; 0x03
 6b2:	bc 83       	std	Y+4, r27	; 0x04
	
	return Local_s32Inputval;
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	9a 81       	ldd	r25, Y+2	; 0x02
 6b8:	ab 81       	ldd	r26, Y+3	; 0x03
 6ba:	bc 81       	ldd	r27, Y+4	; 0x04
}
 6bc:	bc 01       	movw	r22, r24
 6be:	cd 01       	movw	r24, r26
 6c0:	64 96       	adiw	r28, 0x14	; 20
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	de bf       	out	0x3e, r29	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	cd bf       	out	0x3d, r28	; 61
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	df 90       	pop	r13
 6da:	cf 90       	pop	r12
 6dc:	bf 90       	pop	r11
 6de:	af 90       	pop	r10
 6e0:	08 95       	ret

000006e2 <main>:


int main(void)
{
 6e2:	af 92       	push	r10
 6e4:	bf 92       	push	r11
 6e6:	cf 92       	push	r12
 6e8:	df 92       	push	r13
 6ea:	ef 92       	push	r14
 6ec:	ff 92       	push	r15
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	63 97       	sbiw	r28, 0x13	; 19
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	f8 94       	cli
 700:	de bf       	out	0x3e, r29	; 62
 702:	0f be       	out	0x3f, r0	; 63
 704:	cd bf       	out	0x3d, r28	; 61
    DIO_enuInit();
 706:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_enuInit>
	adc_SelectRef(adc_AVCC_MASK);
 70a:	80 e4       	ldi	r24, 0x40	; 64
 70c:	0e 94 49 00 	call	0x92	; 0x92 <adc_SelectRef>
	adc_SelectAdjustment(adc_ADLAR_LEFT_ADJUST);
 710:	80 e2       	ldi	r24, 0x20	; 32
 712:	0e 94 75 00 	call	0xea	; 0xea <adc_SelectAdjustment>
	adc_SelectChannelSingle(adc_ADMUX_ADC4);
 716:	84 e0       	ldi	r24, 0x04	; 4
 718:	0e 94 9e 00 	call	0x13c	; 0x13c <adc_SelectChannelSingle>
	adc_SelectPrescalar(adc_PRESCALAR_DIVIDED_BY128);
 71c:	87 e0       	ldi	r24, 0x07	; 7
 71e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <adc_SelectPrescalar>
	adc_Enable(adc_ENABLE_MASK);
 722:	80 e8       	ldi	r24, 0x80	; 128
 724:	0e 94 bf 00 	call	0x17e	; 0x17e <adc_Enable>
	TMR1_vidInitPreCompile();
 728:	0e 94 47 04 	call	0x88e	; 0x88e <TMR1_vidInitPreCompile>
	//u16 Local_u16Counter = 0;
	u8 Local_u8Val = 0;
 72c:	1b 8a       	std	Y+19, r1	; 0x13
	s32 Local_s32var = 0;
 72e:	19 82       	std	Y+1, r1	; 0x01
 730:	1a 82       	std	Y+2, r1	; 0x02
 732:	1b 82       	std	Y+3, r1	; 0x03
 734:	1c 82       	std	Y+4, r1	; 0x04
	TMR1_enuSetChannel1InputCaptureReg(20000);
 736:	80 e2       	ldi	r24, 0x20	; 32
 738:	9e e4       	ldi	r25, 0x4E	; 78
 73a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <TMR1_enuSetChannel1InputCaptureReg>
	
    while (1) 
    {
		adc_StartConversion_8Bit(&Local_u8Val);
 73e:	ce 01       	movw	r24, r28
 740:	43 96       	adiw	r24, 0x13	; 19
 742:	0e 94 00 01 	call	0x200	; 0x200 <adc_StartConversion_8Bit>
		Local_s32var = map(0,255,750,2500,Local_u8Val);
 746:	8b 89       	ldd	r24, Y+19	; 0x13
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	2b 2f       	mov	r18, r27
 752:	2f 93       	push	r18
 754:	2a 2f       	mov	r18, r26
 756:	2f 93       	push	r18
 758:	29 2f       	mov	r18, r25
 75a:	2f 93       	push	r18
 75c:	8f 93       	push	r24
 75e:	0f 2e       	mov	r0, r31
 760:	f4 ec       	ldi	r31, 0xC4	; 196
 762:	af 2e       	mov	r10, r31
 764:	f9 e0       	ldi	r31, 0x09	; 9
 766:	bf 2e       	mov	r11, r31
 768:	c1 2c       	mov	r12, r1
 76a:	d1 2c       	mov	r13, r1
 76c:	f0 2d       	mov	r31, r0
 76e:	1e ee       	ldi	r17, 0xEE	; 238
 770:	e1 2e       	mov	r14, r17
 772:	12 e0       	ldi	r17, 0x02	; 2
 774:	f1 2e       	mov	r15, r17
 776:	00 e0       	ldi	r16, 0x00	; 0
 778:	10 e0       	ldi	r17, 0x00	; 0
 77a:	2f ef       	ldi	r18, 0xFF	; 255
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	40 e0       	ldi	r20, 0x00	; 0
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	cb 01       	movw	r24, r22
 788:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <map>
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	dc 01       	movw	r26, r24
 796:	cb 01       	movw	r24, r22
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	9a 83       	std	Y+2, r25	; 0x02
 79c:	ab 83       	std	Y+3, r26	; 0x03
 79e:	bc 83       	std	Y+4, r27	; 0x04
		TMR1_enuSetChannel1CompMatchValue(Local_s32var);
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	9a 81       	ldd	r25, Y+2	; 0x02
 7a4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <TMR1_enuSetChannel1CompMatchValue>
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	a0 e2       	ldi	r26, 0x20	; 32
 7ae:	b1 e4       	ldi	r27, 0x41	; 65
 7b0:	8d 83       	std	Y+5, r24	; 0x05
 7b2:	9e 83       	std	Y+6, r25	; 0x06
 7b4:	af 83       	std	Y+7, r26	; 0x07
 7b6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7b8:	20 e0       	ldi	r18, 0x00	; 0
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	4a ef       	ldi	r20, 0xFA	; 250
 7be:	54 e4       	ldi	r21, 0x44	; 68
 7c0:	6d 81       	ldd	r22, Y+5	; 0x05
 7c2:	7e 81       	ldd	r23, Y+6	; 0x06
 7c4:	8f 81       	ldd	r24, Y+7	; 0x07
 7c6:	98 85       	ldd	r25, Y+8	; 0x08
 7c8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
 7cc:	dc 01       	movw	r26, r24
 7ce:	cb 01       	movw	r24, r22
 7d0:	89 87       	std	Y+9, r24	; 0x09
 7d2:	9a 87       	std	Y+10, r25	; 0x0a
 7d4:	ab 87       	std	Y+11, r26	; 0x0b
 7d6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 7d8:	20 e0       	ldi	r18, 0x00	; 0
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	40 e8       	ldi	r20, 0x80	; 128
 7de:	5f e3       	ldi	r21, 0x3F	; 63
 7e0:	69 85       	ldd	r22, Y+9	; 0x09
 7e2:	7a 85       	ldd	r23, Y+10	; 0x0a
 7e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 7e6:	9c 85       	ldd	r25, Y+12	; 0x0c
 7e8:	0e 94 00 05 	call	0xa00	; 0xa00 <__cmpsf2>
 7ec:	88 23       	and	r24, r24
 7ee:	2c f4       	brge	.+10     	; 0x7fa <main+0x118>
		__ticks = 1;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	9e 87       	std	Y+14, r25	; 0x0e
 7f6:	8d 87       	std	Y+13, r24	; 0x0d
 7f8:	3f c0       	rjmp	.+126    	; 0x878 <__stack+0x19>
	else if (__tmp > 65535)
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	3f ef       	ldi	r19, 0xFF	; 255
 7fe:	4f e7       	ldi	r20, 0x7F	; 127
 800:	57 e4       	ldi	r21, 0x47	; 71
 802:	69 85       	ldd	r22, Y+9	; 0x09
 804:	7a 85       	ldd	r23, Y+10	; 0x0a
 806:	8b 85       	ldd	r24, Y+11	; 0x0b
 808:	9c 85       	ldd	r25, Y+12	; 0x0c
 80a:	0e 94 81 05 	call	0xb02	; 0xb02 <__gesf2>
 80e:	18 16       	cp	r1, r24
 810:	4c f5       	brge	.+82     	; 0x864 <__stack+0x5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	40 e2       	ldi	r20, 0x20	; 32
 818:	51 e4       	ldi	r21, 0x41	; 65
 81a:	6d 81       	ldd	r22, Y+5	; 0x05
 81c:	7e 81       	ldd	r23, Y+6	; 0x06
 81e:	8f 81       	ldd	r24, Y+7	; 0x07
 820:	98 85       	ldd	r25, Y+8	; 0x08
 822:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
 826:	dc 01       	movw	r26, r24
 828:	cb 01       	movw	r24, r22
 82a:	bc 01       	movw	r22, r24
 82c:	cd 01       	movw	r24, r26
 82e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 832:	dc 01       	movw	r26, r24
 834:	cb 01       	movw	r24, r22
 836:	9e 87       	std	Y+14, r25	; 0x0e
 838:	8d 87       	std	Y+13, r24	; 0x0d
 83a:	0f c0       	rjmp	.+30     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 83c:	88 ec       	ldi	r24, 0xC8	; 200
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	98 8b       	std	Y+16, r25	; 0x10
 842:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 844:	8f 85       	ldd	r24, Y+15	; 0x0f
 846:	98 89       	ldd	r25, Y+16	; 0x10
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 84c:	98 8b       	std	Y+16, r25	; 0x10
 84e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 850:	8d 85       	ldd	r24, Y+13	; 0x0d
 852:	9e 85       	ldd	r25, Y+14	; 0x0e
 854:	01 97       	sbiw	r24, 0x01	; 1
 856:	9e 87       	std	Y+14, r25	; 0x0e
 858:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 85a:	8d 85       	ldd	r24, Y+13	; 0x0d
 85c:	9e 85       	ldd	r25, Y+14	; 0x0e
 85e:	89 2b       	or	r24, r25
 860:	69 f7       	brne	.-38     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 862:	14 c0       	rjmp	.+40     	; 0x88c <__stack+0x2d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 864:	69 85       	ldd	r22, Y+9	; 0x09
 866:	7a 85       	ldd	r23, Y+10	; 0x0a
 868:	8b 85       	ldd	r24, Y+11	; 0x0b
 86a:	9c 85       	ldd	r25, Y+12	; 0x0c
 86c:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 870:	dc 01       	movw	r26, r24
 872:	cb 01       	movw	r24, r22
 874:	9e 87       	std	Y+14, r25	; 0x0e
 876:	8d 87       	std	Y+13, r24	; 0x0d
 878:	8d 85       	ldd	r24, Y+13	; 0x0d
 87a:	9e 85       	ldd	r25, Y+14	; 0x0e
 87c:	9a 8b       	std	Y+18, r25	; 0x12
 87e:	89 8b       	std	Y+17, r24	; 0x11
 880:	89 89       	ldd	r24, Y+17	; 0x11
 882:	9a 89       	ldd	r25, Y+18	; 0x12
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <__stack+0x25>
 888:	9a 8b       	std	Y+18, r25	; 0x12
 88a:	89 8b       	std	Y+17, r24	; 0x11
		//{
		//	TMR1_enuSetChannel1CompMatchValue(Local_u16Counter);
		//	
		//}
			
    }
 88c:	58 cf       	rjmp	.-336    	; 0x73e <main+0x5c>

0000088e <TMR1_vidInitPreCompile>:
	{
		OCR1BL = Copy_u16Value;
	}
	return Local_enuErrorStatus;

}
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	00 d0       	rcall	.+0      	; 0x894 <TMR1_vidInitPreCompile+0x6>
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	1a 82       	std	Y+2, r1	; 0x02
 89a:	19 82       	std	Y+1, r1	; 0x01
 89c:	8e e4       	ldi	r24, 0x4E	; 78
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	fc 01       	movw	r30, r24
 8a2:	80 81       	ld	r24, Z
 8a4:	91 81       	ldd	r25, Z+1	; 0x01
 8a6:	9a 83       	std	Y+2, r25	; 0x02
 8a8:	89 83       	std	Y+1, r24	; 0x01
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	87 7e       	andi	r24, 0xE7	; 231
 8b0:	9c 7f       	andi	r25, 0xFC	; 252
 8b2:	9a 83       	std	Y+2, r25	; 0x02
 8b4:	89 83       	std	Y+1, r24	; 0x01
 8b6:	89 81       	ldd	r24, Y+1	; 0x01
 8b8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ba:	88 61       	ori	r24, 0x18	; 24
 8bc:	92 60       	ori	r25, 0x02	; 2
 8be:	9a 83       	std	Y+2, r25	; 0x02
 8c0:	89 83       	std	Y+1, r24	; 0x01
 8c2:	8e e4       	ldi	r24, 0x4E	; 78
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	29 81       	ldd	r18, Y+1	; 0x01
 8c8:	3a 81       	ldd	r19, Y+2	; 0x02
 8ca:	fc 01       	movw	r30, r24
 8cc:	31 83       	std	Z+1, r19	; 0x01
 8ce:	20 83       	st	Z, r18
 8d0:	8e e4       	ldi	r24, 0x4E	; 78
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	fc 01       	movw	r30, r24
 8d6:	80 81       	ld	r24, Z
 8d8:	91 81       	ldd	r25, Z+1	; 0x01
 8da:	9a 83       	std	Y+2, r25	; 0x02
 8dc:	89 83       	std	Y+1, r24	; 0x01
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	9a 81       	ldd	r25, Y+2	; 0x02
 8e2:	88 7f       	andi	r24, 0xF8	; 248
 8e4:	9a 83       	std	Y+2, r25	; 0x02
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
 8ea:	9a 81       	ldd	r25, Y+2	; 0x02
 8ec:	82 60       	ori	r24, 0x02	; 2
 8ee:	9a 83       	std	Y+2, r25	; 0x02
 8f0:	89 83       	std	Y+1, r24	; 0x01
 8f2:	8e e4       	ldi	r24, 0x4E	; 78
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	29 81       	ldd	r18, Y+1	; 0x01
 8f8:	3a 81       	ldd	r19, Y+2	; 0x02
 8fa:	fc 01       	movw	r30, r24
 8fc:	31 83       	std	Z+1, r19	; 0x01
 8fe:	20 83       	st	Z, r18
 900:	89 e5       	ldi	r24, 0x59	; 89
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	29 e5       	ldi	r18, 0x59	; 89
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	f9 01       	movw	r30, r18
 90a:	20 81       	ld	r18, Z
 90c:	20 61       	ori	r18, 0x10	; 16
 90e:	fc 01       	movw	r30, r24
 910:	20 83       	st	Z, r18
 912:	8e e4       	ldi	r24, 0x4E	; 78
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	fc 01       	movw	r30, r24
 918:	80 81       	ld	r24, Z
 91a:	91 81       	ldd	r25, Z+1	; 0x01
 91c:	9a 83       	std	Y+2, r25	; 0x02
 91e:	89 83       	std	Y+1, r24	; 0x01
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	9a 81       	ldd	r25, Y+2	; 0x02
 924:	9f 73       	andi	r25, 0x3F	; 63
 926:	9a 83       	std	Y+2, r25	; 0x02
 928:	89 83       	std	Y+1, r24	; 0x01
 92a:	89 81       	ldd	r24, Y+1	; 0x01
 92c:	9a 81       	ldd	r25, Y+2	; 0x02
 92e:	90 68       	ori	r25, 0x80	; 128
 930:	9a 83       	std	Y+2, r25	; 0x02
 932:	89 83       	std	Y+1, r24	; 0x01
 934:	8e e4       	ldi	r24, 0x4E	; 78
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	29 81       	ldd	r18, Y+1	; 0x01
 93a:	3a 81       	ldd	r19, Y+2	; 0x02
 93c:	fc 01       	movw	r30, r24
 93e:	31 83       	std	Z+1, r19	; 0x01
 940:	20 83       	st	Z, r18
 942:	8e e4       	ldi	r24, 0x4E	; 78
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	fc 01       	movw	r30, r24
 948:	80 81       	ld	r24, Z
 94a:	91 81       	ldd	r25, Z+1	; 0x01
 94c:	9a 83       	std	Y+2, r25	; 0x02
 94e:	89 83       	std	Y+1, r24	; 0x01
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	9a 81       	ldd	r25, Y+2	; 0x02
 954:	9f 7c       	andi	r25, 0xCF	; 207
 956:	9a 83       	std	Y+2, r25	; 0x02
 958:	89 83       	std	Y+1, r24	; 0x01
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	9a 81       	ldd	r25, Y+2	; 0x02
 95e:	90 62       	ori	r25, 0x20	; 32
 960:	9a 83       	std	Y+2, r25	; 0x02
 962:	89 83       	std	Y+1, r24	; 0x01
 964:	8e e4       	ldi	r24, 0x4E	; 78
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	29 81       	ldd	r18, Y+1	; 0x01
 96a:	3a 81       	ldd	r19, Y+2	; 0x02
 96c:	fc 01       	movw	r30, r24
 96e:	31 83       	std	Z+1, r19	; 0x01
 970:	20 83       	st	Z, r18
 972:	8e e4       	ldi	r24, 0x4E	; 78
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	fc 01       	movw	r30, r24
 978:	80 81       	ld	r24, Z
 97a:	91 81       	ldd	r25, Z+1	; 0x01
 97c:	9a 83       	std	Y+2, r25	; 0x02
 97e:	89 83       	std	Y+1, r24	; 0x01
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	9a 81       	ldd	r25, Y+2	; 0x02
 984:	8f 7b       	andi	r24, 0xBF	; 191
 986:	9a 83       	std	Y+2, r25	; 0x02
 988:	89 83       	std	Y+1, r24	; 0x01
 98a:	8e e4       	ldi	r24, 0x4E	; 78
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	29 81       	ldd	r18, Y+1	; 0x01
 990:	3a 81       	ldd	r19, Y+2	; 0x02
 992:	fc 01       	movw	r30, r24
 994:	31 83       	std	Z+1, r19	; 0x01
 996:	20 83       	st	Z, r18
 998:	00 00       	nop
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	08 95       	ret

000009a4 <TMR1_enuSetChannel1CompMatchValue>:
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	00 d0       	rcall	.+0      	; 0x9aa <TMR1_enuSetChannel1CompMatchValue+0x6>
 9aa:	1f 92       	push	r1
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	9b 83       	std	Y+3, r25	; 0x03
 9b2:	8a 83       	std	Y+2, r24	; 0x02
 9b4:	19 82       	std	Y+1, r1	; 0x01
 9b6:	8a e4       	ldi	r24, 0x4A	; 74
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	2a 81       	ldd	r18, Y+2	; 0x02
 9bc:	3b 81       	ldd	r19, Y+3	; 0x03
 9be:	fc 01       	movw	r30, r24
 9c0:	31 83       	std	Z+1, r19	; 0x01
 9c2:	20 83       	st	Z, r18
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	0f 90       	pop	r0
 9c8:	0f 90       	pop	r0
 9ca:	0f 90       	pop	r0
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <TMR1_enuSetChannel1InputCaptureReg>:
TMR1_enuErrorStatus TMR1_enuSetChannel1InputCaptureReg(u16 Copy_u16Value)
{
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	00 d0       	rcall	.+0      	; 0x9d8 <TMR1_enuSetChannel1InputCaptureReg+0x6>
 9d8:	1f 92       	push	r1
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	9b 83       	std	Y+3, r25	; 0x03
 9e0:	8a 83       	std	Y+2, r24	; 0x02
	TMR1_enuErrorStatus Local_enuErrorStatus = TMR1_Ok;
 9e2:	19 82       	std	Y+1, r1	; 0x01
	{
		Local_enuErrorStatus = TMR1_NotOk;
	}
	else
	{
		ICR1L = Copy_u16Value;
 9e4:	86 e4       	ldi	r24, 0x46	; 70
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	2a 81       	ldd	r18, Y+2	; 0x02
 9ea:	3b 81       	ldd	r19, Y+3	; 0x03
 9ec:	fc 01       	movw	r30, r24
 9ee:	31 83       	std	Z+1, r19	; 0x01
 9f0:	20 83       	st	Z, r18
	}
	
	return Local_enuErrorStatus;
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 9f4:	0f 90       	pop	r0
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <__cmpsf2>:
 a00:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_cmp>
 a04:	08 f4       	brcc	.+2      	; 0xa08 <__cmpsf2+0x8>
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	08 95       	ret

00000a0a <__fixunssfsi>:
 a0a:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_splitA>
 a0e:	88 f0       	brcs	.+34     	; 0xa32 <__fixunssfsi+0x28>
 a10:	9f 57       	subi	r25, 0x7F	; 127
 a12:	98 f0       	brcs	.+38     	; 0xa3a <__fixunssfsi+0x30>
 a14:	b9 2f       	mov	r27, r25
 a16:	99 27       	eor	r25, r25
 a18:	b7 51       	subi	r27, 0x17	; 23
 a1a:	b0 f0       	brcs	.+44     	; 0xa48 <__fixunssfsi+0x3e>
 a1c:	e1 f0       	breq	.+56     	; 0xa56 <__fixunssfsi+0x4c>
 a1e:	66 0f       	add	r22, r22
 a20:	77 1f       	adc	r23, r23
 a22:	88 1f       	adc	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	1a f0       	brmi	.+6      	; 0xa2e <__fixunssfsi+0x24>
 a28:	ba 95       	dec	r27
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__fixunssfsi+0x14>
 a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__fixunssfsi+0x4c>
 a2e:	b1 30       	cpi	r27, 0x01	; 1
 a30:	91 f0       	breq	.+36     	; 0xa56 <__fixunssfsi+0x4c>
 a32:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_zero>
 a36:	b1 e0       	ldi	r27, 0x01	; 1
 a38:	08 95       	ret
 a3a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_zero>
 a3e:	67 2f       	mov	r22, r23
 a40:	78 2f       	mov	r23, r24
 a42:	88 27       	eor	r24, r24
 a44:	b8 5f       	subi	r27, 0xF8	; 248
 a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x4c>
 a48:	b9 3f       	cpi	r27, 0xF9	; 249
 a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x34>
 a4c:	86 95       	lsr	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	b3 95       	inc	r27
 a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x42>
 a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x5c>
 a58:	90 95       	com	r25
 a5a:	80 95       	com	r24
 a5c:	70 95       	com	r23
 a5e:	61 95       	neg	r22
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	08 95       	ret

00000a68 <__fp_cmp>:
 a68:	99 0f       	add	r25, r25
 a6a:	00 08       	sbc	r0, r0
 a6c:	55 0f       	add	r21, r21
 a6e:	aa 0b       	sbc	r26, r26
 a70:	e0 e8       	ldi	r30, 0x80	; 128
 a72:	fe ef       	ldi	r31, 0xFE	; 254
 a74:	16 16       	cp	r1, r22
 a76:	17 06       	cpc	r1, r23
 a78:	e8 07       	cpc	r30, r24
 a7a:	f9 07       	cpc	r31, r25
 a7c:	c0 f0       	brcs	.+48     	; 0xaae <__fp_cmp+0x46>
 a7e:	12 16       	cp	r1, r18
 a80:	13 06       	cpc	r1, r19
 a82:	e4 07       	cpc	r30, r20
 a84:	f5 07       	cpc	r31, r21
 a86:	98 f0       	brcs	.+38     	; 0xaae <__fp_cmp+0x46>
 a88:	62 1b       	sub	r22, r18
 a8a:	73 0b       	sbc	r23, r19
 a8c:	84 0b       	sbc	r24, r20
 a8e:	95 0b       	sbc	r25, r21
 a90:	39 f4       	brne	.+14     	; 0xaa0 <__fp_cmp+0x38>
 a92:	0a 26       	eor	r0, r26
 a94:	61 f0       	breq	.+24     	; 0xaae <__fp_cmp+0x46>
 a96:	23 2b       	or	r18, r19
 a98:	24 2b       	or	r18, r20
 a9a:	25 2b       	or	r18, r21
 a9c:	21 f4       	brne	.+8      	; 0xaa6 <__fp_cmp+0x3e>
 a9e:	08 95       	ret
 aa0:	0a 26       	eor	r0, r26
 aa2:	09 f4       	brne	.+2      	; 0xaa6 <__fp_cmp+0x3e>
 aa4:	a1 40       	sbci	r26, 0x01	; 1
 aa6:	a6 95       	lsr	r26
 aa8:	8f ef       	ldi	r24, 0xFF	; 255
 aaa:	81 1d       	adc	r24, r1
 aac:	81 1d       	adc	r24, r1
 aae:	08 95       	ret

00000ab0 <__fp_split3>:
 ab0:	57 fd       	sbrc	r21, 7
 ab2:	90 58       	subi	r25, 0x80	; 128
 ab4:	44 0f       	add	r20, r20
 ab6:	55 1f       	adc	r21, r21
 ab8:	59 f0       	breq	.+22     	; 0xad0 <__fp_splitA+0x10>
 aba:	5f 3f       	cpi	r21, 0xFF	; 255
 abc:	71 f0       	breq	.+28     	; 0xada <__fp_splitA+0x1a>
 abe:	47 95       	ror	r20

00000ac0 <__fp_splitA>:
 ac0:	88 0f       	add	r24, r24
 ac2:	97 fb       	bst	r25, 7
 ac4:	99 1f       	adc	r25, r25
 ac6:	61 f0       	breq	.+24     	; 0xae0 <__fp_splitA+0x20>
 ac8:	9f 3f       	cpi	r25, 0xFF	; 255
 aca:	79 f0       	breq	.+30     	; 0xaea <__fp_splitA+0x2a>
 acc:	87 95       	ror	r24
 ace:	08 95       	ret
 ad0:	12 16       	cp	r1, r18
 ad2:	13 06       	cpc	r1, r19
 ad4:	14 06       	cpc	r1, r20
 ad6:	55 1f       	adc	r21, r21
 ad8:	f2 cf       	rjmp	.-28     	; 0xabe <__fp_split3+0xe>
 ada:	46 95       	lsr	r20
 adc:	f1 df       	rcall	.-30     	; 0xac0 <__fp_splitA>
 ade:	08 c0       	rjmp	.+16     	; 0xaf0 <__fp_splitA+0x30>
 ae0:	16 16       	cp	r1, r22
 ae2:	17 06       	cpc	r1, r23
 ae4:	18 06       	cpc	r1, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	f1 cf       	rjmp	.-30     	; 0xacc <__fp_splitA+0xc>
 aea:	86 95       	lsr	r24
 aec:	71 05       	cpc	r23, r1
 aee:	61 05       	cpc	r22, r1
 af0:	08 94       	sec
 af2:	08 95       	ret

00000af4 <__fp_zero>:
 af4:	e8 94       	clt

00000af6 <__fp_szero>:
 af6:	bb 27       	eor	r27, r27
 af8:	66 27       	eor	r22, r22
 afa:	77 27       	eor	r23, r23
 afc:	cb 01       	movw	r24, r22
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__gesf2>:
 b02:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_cmp>
 b06:	08 f4       	brcc	.+2      	; 0xb0a <__gesf2+0x8>
 b08:	8f ef       	ldi	r24, 0xFF	; 255
 b0a:	08 95       	ret

00000b0c <__mulsf3>:
 b0c:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3x>
 b10:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_round>
 b14:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fp_pscA>
 b18:	38 f0       	brcs	.+14     	; 0xb28 <__mulsf3+0x1c>
 b1a:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_pscB>
 b1e:	20 f0       	brcs	.+8      	; 0xb28 <__mulsf3+0x1c>
 b20:	95 23       	and	r25, r21
 b22:	11 f0       	breq	.+4      	; 0xb28 <__mulsf3+0x1c>
 b24:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
 b28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_nan>
 b2c:	11 24       	eor	r1, r1
 b2e:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>

00000b32 <__mulsf3x>:
 b32:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_split3>
 b36:	70 f3       	brcs	.-36     	; 0xb14 <__mulsf3+0x8>

00000b38 <__mulsf3_pse>:
 b38:	95 9f       	mul	r25, r21
 b3a:	c1 f3       	breq	.-16     	; 0xb2c <__mulsf3+0x20>
 b3c:	95 0f       	add	r25, r21
 b3e:	50 e0       	ldi	r21, 0x00	; 0
 b40:	55 1f       	adc	r21, r21
 b42:	62 9f       	mul	r22, r18
 b44:	f0 01       	movw	r30, r0
 b46:	72 9f       	mul	r23, r18
 b48:	bb 27       	eor	r27, r27
 b4a:	f0 0d       	add	r31, r0
 b4c:	b1 1d       	adc	r27, r1
 b4e:	63 9f       	mul	r22, r19
 b50:	aa 27       	eor	r26, r26
 b52:	f0 0d       	add	r31, r0
 b54:	b1 1d       	adc	r27, r1
 b56:	aa 1f       	adc	r26, r26
 b58:	64 9f       	mul	r22, r20
 b5a:	66 27       	eor	r22, r22
 b5c:	b0 0d       	add	r27, r0
 b5e:	a1 1d       	adc	r26, r1
 b60:	66 1f       	adc	r22, r22
 b62:	82 9f       	mul	r24, r18
 b64:	22 27       	eor	r18, r18
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	62 1f       	adc	r22, r18
 b6c:	73 9f       	mul	r23, r19
 b6e:	b0 0d       	add	r27, r0
 b70:	a1 1d       	adc	r26, r1
 b72:	62 1f       	adc	r22, r18
 b74:	83 9f       	mul	r24, r19
 b76:	a0 0d       	add	r26, r0
 b78:	61 1d       	adc	r22, r1
 b7a:	22 1f       	adc	r18, r18
 b7c:	74 9f       	mul	r23, r20
 b7e:	33 27       	eor	r19, r19
 b80:	a0 0d       	add	r26, r0
 b82:	61 1d       	adc	r22, r1
 b84:	23 1f       	adc	r18, r19
 b86:	84 9f       	mul	r24, r20
 b88:	60 0d       	add	r22, r0
 b8a:	21 1d       	adc	r18, r1
 b8c:	82 2f       	mov	r24, r18
 b8e:	76 2f       	mov	r23, r22
 b90:	6a 2f       	mov	r22, r26
 b92:	11 24       	eor	r1, r1
 b94:	9f 57       	subi	r25, 0x7F	; 127
 b96:	50 40       	sbci	r21, 0x00	; 0
 b98:	9a f0       	brmi	.+38     	; 0xbc0 <__mulsf3_pse+0x88>
 b9a:	f1 f0       	breq	.+60     	; 0xbd8 <__mulsf3_pse+0xa0>
 b9c:	88 23       	and	r24, r24
 b9e:	4a f0       	brmi	.+18     	; 0xbb2 <__mulsf3_pse+0x7a>
 ba0:	ee 0f       	add	r30, r30
 ba2:	ff 1f       	adc	r31, r31
 ba4:	bb 1f       	adc	r27, r27
 ba6:	66 1f       	adc	r22, r22
 ba8:	77 1f       	adc	r23, r23
 baa:	88 1f       	adc	r24, r24
 bac:	91 50       	subi	r25, 0x01	; 1
 bae:	50 40       	sbci	r21, 0x00	; 0
 bb0:	a9 f7       	brne	.-22     	; 0xb9c <__mulsf3_pse+0x64>
 bb2:	9e 3f       	cpi	r25, 0xFE	; 254
 bb4:	51 05       	cpc	r21, r1
 bb6:	80 f0       	brcs	.+32     	; 0xbd8 <__mulsf3_pse+0xa0>
 bb8:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_inf>
 bbc:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
 bc0:	5f 3f       	cpi	r21, 0xFF	; 255
 bc2:	e4 f3       	brlt	.-8      	; 0xbbc <__mulsf3_pse+0x84>
 bc4:	98 3e       	cpi	r25, 0xE8	; 232
 bc6:	d4 f3       	brlt	.-12     	; 0xbbc <__mulsf3_pse+0x84>
 bc8:	86 95       	lsr	r24
 bca:	77 95       	ror	r23
 bcc:	67 95       	ror	r22
 bce:	b7 95       	ror	r27
 bd0:	f7 95       	ror	r31
 bd2:	e7 95       	ror	r30
 bd4:	9f 5f       	subi	r25, 0xFF	; 255
 bd6:	c1 f7       	brne	.-16     	; 0xbc8 <__mulsf3_pse+0x90>
 bd8:	fe 2b       	or	r31, r30
 bda:	88 0f       	add	r24, r24
 bdc:	91 1d       	adc	r25, r1
 bde:	96 95       	lsr	r25
 be0:	87 95       	ror	r24
 be2:	97 f9       	bld	r25, 7
 be4:	08 95       	ret

00000be6 <__fp_inf>:
 be6:	97 f9       	bld	r25, 7
 be8:	9f 67       	ori	r25, 0x7F	; 127
 bea:	80 e8       	ldi	r24, 0x80	; 128
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	60 e0       	ldi	r22, 0x00	; 0
 bf0:	08 95       	ret

00000bf2 <__fp_nan>:
 bf2:	9f ef       	ldi	r25, 0xFF	; 255
 bf4:	80 ec       	ldi	r24, 0xC0	; 192
 bf6:	08 95       	ret

00000bf8 <__fp_pscA>:
 bf8:	00 24       	eor	r0, r0
 bfa:	0a 94       	dec	r0
 bfc:	16 16       	cp	r1, r22
 bfe:	17 06       	cpc	r1, r23
 c00:	18 06       	cpc	r1, r24
 c02:	09 06       	cpc	r0, r25
 c04:	08 95       	ret

00000c06 <__fp_pscB>:
 c06:	00 24       	eor	r0, r0
 c08:	0a 94       	dec	r0
 c0a:	12 16       	cp	r1, r18
 c0c:	13 06       	cpc	r1, r19
 c0e:	14 06       	cpc	r1, r20
 c10:	05 06       	cpc	r0, r21
 c12:	08 95       	ret

00000c14 <__fp_round>:
 c14:	09 2e       	mov	r0, r25
 c16:	03 94       	inc	r0
 c18:	00 0c       	add	r0, r0
 c1a:	11 f4       	brne	.+4      	; 0xc20 <__fp_round+0xc>
 c1c:	88 23       	and	r24, r24
 c1e:	52 f0       	brmi	.+20     	; 0xc34 <__fp_round+0x20>
 c20:	bb 0f       	add	r27, r27
 c22:	40 f4       	brcc	.+16     	; 0xc34 <__fp_round+0x20>
 c24:	bf 2b       	or	r27, r31
 c26:	11 f4       	brne	.+4      	; 0xc2c <__fp_round+0x18>
 c28:	60 ff       	sbrs	r22, 0
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__fp_round+0x20>
 c2c:	6f 5f       	subi	r22, 0xFF	; 255
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <__mulsi3>:
 c36:	db 01       	movw	r26, r22
 c38:	8f 93       	push	r24
 c3a:	9f 93       	push	r25
 c3c:	0e 94 4a 06 	call	0xc94	; 0xc94 <__muluhisi3>
 c40:	bf 91       	pop	r27
 c42:	af 91       	pop	r26
 c44:	a2 9f       	mul	r26, r18
 c46:	80 0d       	add	r24, r0
 c48:	91 1d       	adc	r25, r1
 c4a:	a3 9f       	mul	r26, r19
 c4c:	90 0d       	add	r25, r0
 c4e:	b2 9f       	mul	r27, r18
 c50:	90 0d       	add	r25, r0
 c52:	11 24       	eor	r1, r1
 c54:	08 95       	ret

00000c56 <__divmodsi4>:
 c56:	05 2e       	mov	r0, r21
 c58:	97 fb       	bst	r25, 7
 c5a:	1e f4       	brtc	.+6      	; 0xc62 <__divmodsi4+0xc>
 c5c:	00 94       	com	r0
 c5e:	0e 94 42 06 	call	0xc84	; 0xc84 <__negsi2>
 c62:	57 fd       	sbrc	r21, 7
 c64:	07 d0       	rcall	.+14     	; 0xc74 <__divmodsi4_neg2>
 c66:	0e 94 55 06 	call	0xcaa	; 0xcaa <__udivmodsi4>
 c6a:	07 fc       	sbrc	r0, 7
 c6c:	03 d0       	rcall	.+6      	; 0xc74 <__divmodsi4_neg2>
 c6e:	4e f4       	brtc	.+18     	; 0xc82 <__divmodsi4_exit>
 c70:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__negsi2>

00000c74 <__divmodsi4_neg2>:
 c74:	50 95       	com	r21
 c76:	40 95       	com	r20
 c78:	30 95       	com	r19
 c7a:	21 95       	neg	r18
 c7c:	3f 4f       	sbci	r19, 0xFF	; 255
 c7e:	4f 4f       	sbci	r20, 0xFF	; 255
 c80:	5f 4f       	sbci	r21, 0xFF	; 255

00000c82 <__divmodsi4_exit>:
 c82:	08 95       	ret

00000c84 <__negsi2>:
 c84:	90 95       	com	r25
 c86:	80 95       	com	r24
 c88:	70 95       	com	r23
 c8a:	61 95       	neg	r22
 c8c:	7f 4f       	sbci	r23, 0xFF	; 255
 c8e:	8f 4f       	sbci	r24, 0xFF	; 255
 c90:	9f 4f       	sbci	r25, 0xFF	; 255
 c92:	08 95       	ret

00000c94 <__muluhisi3>:
 c94:	0e 94 77 06 	call	0xcee	; 0xcee <__umulhisi3>
 c98:	a5 9f       	mul	r26, r21
 c9a:	90 0d       	add	r25, r0
 c9c:	b4 9f       	mul	r27, r20
 c9e:	90 0d       	add	r25, r0
 ca0:	a4 9f       	mul	r26, r20
 ca2:	80 0d       	add	r24, r0
 ca4:	91 1d       	adc	r25, r1
 ca6:	11 24       	eor	r1, r1
 ca8:	08 95       	ret

00000caa <__udivmodsi4>:
 caa:	a1 e2       	ldi	r26, 0x21	; 33
 cac:	1a 2e       	mov	r1, r26
 cae:	aa 1b       	sub	r26, r26
 cb0:	bb 1b       	sub	r27, r27
 cb2:	fd 01       	movw	r30, r26
 cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__udivmodsi4_ep>

00000cb6 <__udivmodsi4_loop>:
 cb6:	aa 1f       	adc	r26, r26
 cb8:	bb 1f       	adc	r27, r27
 cba:	ee 1f       	adc	r30, r30
 cbc:	ff 1f       	adc	r31, r31
 cbe:	a2 17       	cp	r26, r18
 cc0:	b3 07       	cpc	r27, r19
 cc2:	e4 07       	cpc	r30, r20
 cc4:	f5 07       	cpc	r31, r21
 cc6:	20 f0       	brcs	.+8      	; 0xcd0 <__udivmodsi4_ep>
 cc8:	a2 1b       	sub	r26, r18
 cca:	b3 0b       	sbc	r27, r19
 ccc:	e4 0b       	sbc	r30, r20
 cce:	f5 0b       	sbc	r31, r21

00000cd0 <__udivmodsi4_ep>:
 cd0:	66 1f       	adc	r22, r22
 cd2:	77 1f       	adc	r23, r23
 cd4:	88 1f       	adc	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	1a 94       	dec	r1
 cda:	69 f7       	brne	.-38     	; 0xcb6 <__udivmodsi4_loop>
 cdc:	60 95       	com	r22
 cde:	70 95       	com	r23
 ce0:	80 95       	com	r24
 ce2:	90 95       	com	r25
 ce4:	9b 01       	movw	r18, r22
 ce6:	ac 01       	movw	r20, r24
 ce8:	bd 01       	movw	r22, r26
 cea:	cf 01       	movw	r24, r30
 cec:	08 95       	ret

00000cee <__umulhisi3>:
 cee:	a2 9f       	mul	r26, r18
 cf0:	b0 01       	movw	r22, r0
 cf2:	b3 9f       	mul	r27, r19
 cf4:	c0 01       	movw	r24, r0
 cf6:	a3 9f       	mul	r26, r19
 cf8:	70 0d       	add	r23, r0
 cfa:	81 1d       	adc	r24, r1
 cfc:	11 24       	eor	r1, r1
 cfe:	91 1d       	adc	r25, r1
 d00:	b2 9f       	mul	r27, r18
 d02:	70 0d       	add	r23, r0
 d04:	81 1d       	adc	r24, r1
 d06:	11 24       	eor	r1, r1
 d08:	91 1d       	adc	r25, r1
 d0a:	08 95       	ret

00000d0c <_exit>:
 d0c:	f8 94       	cli

00000d0e <__stop_program>:
 d0e:	ff cf       	rjmp	.-2      	; 0xd0e <__stop_program>
