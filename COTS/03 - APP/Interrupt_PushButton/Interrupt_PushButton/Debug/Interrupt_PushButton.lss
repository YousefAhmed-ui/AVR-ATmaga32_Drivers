
Interrupt_PushButton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000042a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000104d  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ff  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000783  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000991  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a11  00000000  00000000  00003239  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00003c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  8a:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enuInit>:
		
	}


	return Local_u8ErrorStatus;
}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	d4 c0       	rjmp	.+424    	; 0x23e <DIO_enuInit+0x1ac>
  96:	98 2f       	mov	r25, r24
  98:	96 95       	lsr	r25
  9a:	96 95       	lsr	r25
  9c:	96 95       	lsr	r25
  9e:	28 2f       	mov	r18, r24
  a0:	27 70       	andi	r18, 0x07	; 7
  a2:	91 30       	cpi	r25, 0x01	; 1
  a4:	c9 f1       	breq	.+114    	; 0x118 <DIO_enuInit+0x86>
  a6:	38 f0       	brcs	.+14     	; 0xb6 <DIO_enuInit+0x24>
  a8:	92 30       	cpi	r25, 0x02	; 2
  aa:	09 f4       	brne	.+2      	; 0xae <DIO_enuInit+0x1c>
  ac:	66 c0       	rjmp	.+204    	; 0x17a <DIO_enuInit+0xe8>
  ae:	93 30       	cpi	r25, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_enuInit+0x22>
  b2:	94 c0       	rjmp	.+296    	; 0x1dc <DIO_enuInit+0x14a>
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <DIO_enuInit+0x1aa>
  b6:	48 2f       	mov	r20, r24
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	fa 01       	movw	r30, r20
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	90 81       	ld	r25, Z
  c6:	91 30       	cpi	r25, 0x01	; 1
  c8:	69 f4       	brne	.+26     	; 0xe4 <DIO_enuInit+0x52>
  ca:	9a b3       	in	r25, 0x1a	; 26
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	ba 01       	movw	r22, r20
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_enuInit+0x46>
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_enuInit+0x42>
  dc:	9b 01       	movw	r18, r22
  de:	29 2b       	or	r18, r25
  e0:	2a bb       	out	0x1a, r18	; 26
  e2:	ac c0       	rjmp	.+344    	; 0x23c <DIO_enuInit+0x1aa>
  e4:	9a b3       	in	r25, 0x1a	; 26
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	fb 01       	movw	r30, r22
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_enuInit+0x60>
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_enuInit+0x5c>
  f6:	9f 01       	movw	r18, r30
  f8:	6e 2f       	mov	r22, r30
  fa:	60 95       	com	r22
  fc:	96 23       	and	r25, r22
  fe:	9a bb       	out	0x1a, r25	; 26
 100:	44 0f       	add	r20, r20
 102:	55 1f       	adc	r21, r21
 104:	fa 01       	movw	r30, r20
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	91 11       	cpse	r25, r1
 10e:	96 c0       	rjmp	.+300    	; 0x23c <DIO_enuInit+0x1aa>
 110:	9b b3       	in	r25, 0x1b	; 27
 112:	29 2b       	or	r18, r25
 114:	2b bb       	out	0x1b, r18	; 27
 116:	92 c0       	rjmp	.+292    	; 0x23c <DIO_enuInit+0x1aa>
 118:	48 2f       	mov	r20, r24
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	fa 01       	movw	r30, r20
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e0 5a       	subi	r30, 0xA0	; 160
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	90 81       	ld	r25, Z
 128:	91 30       	cpi	r25, 0x01	; 1
 12a:	69 f4       	brne	.+26     	; 0x146 <DIO_enuInit+0xb4>
 12c:	97 b3       	in	r25, 0x17	; 23
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	ba 01       	movw	r22, r20
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_enuInit+0xa8>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	2a 95       	dec	r18
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_enuInit+0xa4>
 13e:	9b 01       	movw	r18, r22
 140:	29 2b       	or	r18, r25
 142:	27 bb       	out	0x17, r18	; 23
 144:	7b c0       	rjmp	.+246    	; 0x23c <DIO_enuInit+0x1aa>
 146:	97 b3       	in	r25, 0x17	; 23
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	fb 01       	movw	r30, r22
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_enuInit+0xc2>
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	2a 95       	dec	r18
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_enuInit+0xbe>
 158:	9f 01       	movw	r18, r30
 15a:	6e 2f       	mov	r22, r30
 15c:	60 95       	com	r22
 15e:	96 23       	and	r25, r22
 160:	97 bb       	out	0x17, r25	; 23
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	fa 01       	movw	r30, r20
 168:	e0 5a       	subi	r30, 0xA0	; 160
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	91 81       	ldd	r25, Z+1	; 0x01
 16e:	91 11       	cpse	r25, r1
 170:	65 c0       	rjmp	.+202    	; 0x23c <DIO_enuInit+0x1aa>
 172:	98 b3       	in	r25, 0x18	; 24
 174:	29 2b       	or	r18, r25
 176:	28 bb       	out	0x18, r18	; 24
 178:	61 c0       	rjmp	.+194    	; 0x23c <DIO_enuInit+0x1aa>
 17a:	48 2f       	mov	r20, r24
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	fa 01       	movw	r30, r20
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 5a       	subi	r30, 0xA0	; 160
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	90 81       	ld	r25, Z
 18a:	91 30       	cpi	r25, 0x01	; 1
 18c:	69 f4       	brne	.+26     	; 0x1a8 <DIO_enuInit+0x116>
 18e:	94 b3       	in	r25, 0x14	; 20
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	ba 01       	movw	r22, r20
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_enuInit+0x10a>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	2a 95       	dec	r18
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_enuInit+0x106>
 1a0:	9b 01       	movw	r18, r22
 1a2:	29 2b       	or	r18, r25
 1a4:	24 bb       	out	0x14, r18	; 20
 1a6:	4a c0       	rjmp	.+148    	; 0x23c <DIO_enuInit+0x1aa>
 1a8:	94 b3       	in	r25, 0x14	; 20
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	fb 01       	movw	r30, r22
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_enuInit+0x124>
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	2a 95       	dec	r18
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_enuInit+0x120>
 1ba:	9f 01       	movw	r18, r30
 1bc:	6e 2f       	mov	r22, r30
 1be:	60 95       	com	r22
 1c0:	96 23       	and	r25, r22
 1c2:	94 bb       	out	0x14, r25	; 20
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	fa 01       	movw	r30, r20
 1ca:	e0 5a       	subi	r30, 0xA0	; 160
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	91 81       	ldd	r25, Z+1	; 0x01
 1d0:	91 11       	cpse	r25, r1
 1d2:	34 c0       	rjmp	.+104    	; 0x23c <DIO_enuInit+0x1aa>
 1d4:	95 b3       	in	r25, 0x15	; 21
 1d6:	29 2b       	or	r18, r25
 1d8:	25 bb       	out	0x15, r18	; 21
 1da:	30 c0       	rjmp	.+96     	; 0x23c <DIO_enuInit+0x1aa>
 1dc:	48 2f       	mov	r20, r24
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	fa 01       	movw	r30, r20
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	e0 5a       	subi	r30, 0xA0	; 160
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	90 81       	ld	r25, Z
 1ec:	91 30       	cpi	r25, 0x01	; 1
 1ee:	69 f4       	brne	.+26     	; 0x20a <DIO_enuInit+0x178>
 1f0:	91 b3       	in	r25, 0x11	; 17
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	ba 01       	movw	r22, r20
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_enuInit+0x16c>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	2a 95       	dec	r18
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_enuInit+0x168>
 202:	9b 01       	movw	r18, r22
 204:	29 2b       	or	r18, r25
 206:	21 bb       	out	0x11, r18	; 17
 208:	19 c0       	rjmp	.+50     	; 0x23c <DIO_enuInit+0x1aa>
 20a:	91 b3       	in	r25, 0x11	; 17
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	fb 01       	movw	r30, r22
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_enuInit+0x186>
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_enuInit+0x182>
 21c:	9f 01       	movw	r18, r30
 21e:	6e 2f       	mov	r22, r30
 220:	60 95       	com	r22
 222:	96 23       	and	r25, r22
 224:	91 bb       	out	0x11, r25	; 17
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	fa 01       	movw	r30, r20
 22c:	e0 5a       	subi	r30, 0xA0	; 160
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	91 11       	cpse	r25, r1
 234:	03 c0       	rjmp	.+6      	; 0x23c <DIO_enuInit+0x1aa>
 236:	92 b3       	in	r25, 0x12	; 18
 238:	29 2b       	or	r18, r25
 23a:	22 bb       	out	0x12, r18	; 18
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 32       	cpi	r24, 0x20	; 32
 240:	08 f4       	brcc	.+2      	; 0x244 <DIO_enuInit+0x1b2>
 242:	29 cf       	rjmp	.-430    	; 0x96 <DIO_enuInit+0x4>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret

00000248 <DIO_enuSetPin>:


DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS)
 248:	80 32       	cpi	r24, 0x20	; 32
 24a:	08 f0       	brcs	.+2      	; 0x24e <DIO_enuSetPin+0x6>
 24c:	8b c0       	rjmp	.+278    	; 0x364 <DIO_enuSetPin+0x11c>
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
	}
	else
	{

		u8 Local_u8PortNumber = Copy_u8PinNumber/NumberOfPin;
 24e:	98 2f       	mov	r25, r24
 250:	96 95       	lsr	r25
 252:	96 95       	lsr	r25
 254:	96 95       	lsr	r25
		u8 Local_u8PinNumber = Copy_u8PinNumber%NumberOfPin;
 256:	87 70       	andi	r24, 0x07	; 7

		switch (Local_u8PortNumber)
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	39 f1       	breq	.+78     	; 0x2aa <DIO_enuSetPin+0x62>
 25c:	38 f0       	brcs	.+14     	; 0x26c <DIO_enuSetPin+0x24>
 25e:	92 30       	cpi	r25, 0x02	; 2
 260:	09 f4       	brne	.+2      	; 0x264 <DIO_enuSetPin+0x1c>
 262:	42 c0       	rjmp	.+132    	; 0x2e8 <DIO_enuSetPin+0xa0>
 264:	93 30       	cpi	r25, 0x03	; 3
 266:	09 f4       	brne	.+2      	; 0x26a <DIO_enuSetPin+0x22>
 268:	5e c0       	rjmp	.+188    	; 0x326 <DIO_enuSetPin+0xde>
 26a:	7e c0       	rjmp	.+252    	; 0x368 <DIO_enuSetPin+0x120>
		{
			case (DIO_PORTA):
			if( Copy_enuPinValue == DIO_enuHigh )
 26c:	61 30       	cpi	r22, 0x01	; 1
 26e:	71 f4       	brne	.+28     	; 0x28c <DIO_enuSetPin+0x44>
			{
				SET_BIT(PORTA,Local_u8PinNumber);
 270:	4b b3       	in	r20, 0x1b	; 27
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_enuSetPin+0x36>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_enuSetPin+0x32>
 282:	cb 01       	movw	r24, r22
 284:	84 2b       	or	r24, r20
 286:	8b bb       	out	0x1b, r24	; 27



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
			{
				SET_BIT(PORTA,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTA,Local_u8PinNumber);
 28c:	4b b3       	in	r20, 0x1b	; 27
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuSetPin+0x52>
 296:	66 0f       	add	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	8a 95       	dec	r24
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuSetPin+0x4e>
 29e:	cb 01       	movw	r24, r22
 2a0:	80 95       	com	r24
 2a2:	84 23       	and	r24, r20
 2a4:	8b bb       	out	0x1b, r24	; 27



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
				CLR_BIT(PORTA,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTB):

			if( Copy_enuPinValue == DIO_enuHigh )
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	71 f4       	brne	.+28     	; 0x2ca <DIO_enuSetPin+0x82>
			{
				SET_BIT(PORTB,Local_u8PinNumber);
 2ae:	48 b3       	in	r20, 0x18	; 24
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	b9 01       	movw	r22, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_enuSetPin+0x74>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	8a 95       	dec	r24
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_enuSetPin+0x70>
 2c0:	cb 01       	movw	r24, r22
 2c2:	84 2b       	or	r24, r20
 2c4:	88 bb       	out	0x18, r24	; 24



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
			{
				SET_BIT(PORTB,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTB,Local_u8PinNumber);
 2ca:	48 b3       	in	r20, 0x18	; 24
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_enuSetPin+0x90>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_enuSetPin+0x8c>
 2dc:	cb 01       	movw	r24, r22
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	88 bb       	out	0x18, r24	; 24



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
			{
				CLR_BIT(PORTB,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTC):
			if( Copy_enuPinValue == DIO_enuHigh )
 2e8:	61 30       	cpi	r22, 0x01	; 1
 2ea:	71 f4       	brne	.+28     	; 0x308 <DIO_enuSetPin+0xc0>
			{
				SET_BIT(PORTC,Local_u8PinNumber);
 2ec:	45 b3       	in	r20, 0x15	; 21
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	b9 01       	movw	r22, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_enuSetPin+0xb2>
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	8a 95       	dec	r24
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_enuSetPin+0xae>
 2fe:	cb 01       	movw	r24, r22
 300:	84 2b       	or	r24, r20
 302:	85 bb       	out	0x15, r24	; 21



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	08 95       	ret
			{
				SET_BIT(PORTC,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTC,Local_u8PinNumber);
 308:	45 b3       	in	r20, 0x15	; 21
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_enuSetPin+0xce>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_enuSetPin+0xca>
 31a:	cb 01       	movw	r24, r22
 31c:	80 95       	com	r24
 31e:	84 23       	and	r24, r20
 320:	85 bb       	out	0x15, r24	; 21



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
			{
				CLR_BIT(PORTC,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTD):
			if( Copy_enuPinValue == DIO_enuHigh )
 326:	61 30       	cpi	r22, 0x01	; 1
 328:	71 f4       	brne	.+28     	; 0x346 <DIO_enuSetPin+0xfe>
			{
				SET_BIT(PORTD,Local_u8PinNumber);
 32a:	42 b3       	in	r20, 0x12	; 18
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_enuSetPin+0xf0>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	8a 95       	dec	r24
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_enuSetPin+0xec>
 33c:	cb 01       	movw	r24, r22
 33e:	84 2b       	or	r24, r20
 340:	82 bb       	out	0x12, r24	; 18



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
			{
				SET_BIT(PORTD,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTD,Local_u8PinNumber);
 346:	42 b3       	in	r20, 0x12	; 18
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	b9 01       	movw	r22, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_enuSetPin+0x10c>
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	8a 95       	dec	r24
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_enuSetPin+0x108>
 358:	cb 01       	movw	r24, r22
 35a:	80 95       	com	r24
 35c:	84 23       	and	r24, r20
 35e:	82 bb       	out	0x12, r24	; 18



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS)
	{
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	08 95       	ret
			{
				CLR_BIT(PORTD,Local_u8PinNumber);
			}
			break;
			default:
			Local_u8ErrorStatus = DIO_enuNotOk;
 368:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return Local_u8ErrorStatus;

}
 36a:	08 95       	ret

0000036c <EXTI_enuInitInterrupt>:
	MCUCR |= INT0_ONCHANGE;
	#elif INT0_MODE == FallingEdge
	MCUCR = 0;
	MCUCR |= INT0_ONCHANGE;
	#else
	MCUCR = 0;
 36c:	15 be       	out	0x35, r1	; 53
	MCUCR |= INT0_RISINGEDGE;
 36e:	85 b7       	in	r24, 0x35	; 53
 370:	83 60       	ori	r24, 0x03	; 3
 372:	85 bf       	out	0x35, r24	; 53
	MCUCR |= INT1_ONCHANGE;
	#elif INT1_MODE == FallingEdge
	MCUCR = 0;
	MCUCR |= INT1_ONCHANGE;
	#else
	MCUCR = 0;
 374:	15 be       	out	0x35, r1	; 53
	MCUCR |= INT1_RISINGEDGE;
 376:	85 b7       	in	r24, 0x35	; 53
 378:	8c 60       	ori	r24, 0x0C	; 12
 37a:	85 bf       	out	0x35, r24	; 53

	#if INT2_MODE == FallingEdge
	MCUCSR = 0;
	MCUCSR |= INT0_ONCHANGE;
	#else
	MCUCSR = 0;
 37c:	14 be       	out	0x34, r1	; 52
	MCUCSR |= INT2_RISINGEDGE;
 37e:	84 b7       	in	r24, 0x34	; 52
 380:	80 64       	ori	r24, 0x40	; 64
 382:	84 bf       	out	0x34, r24	; 52
	#endif
}
 384:	08 95       	ret

00000386 <EXTI_enuEnableInterrupt>:


EXTI_enuErrorStatus_t EXTI_enuEnableInterrupt(u8 Copy_u8IntNum)
{
	u8 Local_u8ErrorStatus = EXTI_enuOk;
	if( Copy_u8IntNum > EXTI_Num )
 386:	84 30       	cpi	r24, 0x04	; 4
 388:	98 f4       	brcc	.+38     	; 0x3b0 <EXTI_enuEnableInterrupt+0x2a>
	{
		Local_u8ErrorStatus = EXTI_enuInValidIntNum;
	}
	else
	{
		if(Copy_u8IntNum == INT0)
 38a:	81 11       	cpse	r24, r1
 38c:	05 c0       	rjmp	.+10     	; 0x398 <EXTI_enuEnableInterrupt+0x12>
		SET_BIT(GICR,GICR_INTF0);
 38e:	8b b7       	in	r24, 0x3b	; 59
 390:	80 64       	ori	r24, 0x40	; 64
 392:	8b bf       	out	0x3b, r24	; 59



EXTI_enuErrorStatus_t EXTI_enuEnableInterrupt(u8 Copy_u8IntNum)
{
	u8 Local_u8ErrorStatus = EXTI_enuOk;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
	}
	else
	{
		if(Copy_u8IntNum == INT0)
		SET_BIT(GICR,GICR_INTF0);
		else if (Copy_u8IntNum == INT1)
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	29 f4       	brne	.+10     	; 0x3a6 <EXTI_enuEnableInterrupt+0x20>
		SET_BIT(GICR,GICR_INTF1);
 39c:	8b b7       	in	r24, 0x3b	; 59
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	8b bf       	out	0x3b, r24	; 59



EXTI_enuErrorStatus_t EXTI_enuEnableInterrupt(u8 Copy_u8IntNum)
{
	u8 Local_u8ErrorStatus = EXTI_enuOk;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
		if(Copy_u8IntNum == INT0)
		SET_BIT(GICR,GICR_INTF0);
		else if (Copy_u8IntNum == INT1)
		SET_BIT(GICR,GICR_INTF1);
		else
		SET_BIT(GICR,GICR_INTF2);
 3a6:	8b b7       	in	r24, 0x3b	; 59
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	8b bf       	out	0x3b, r24	; 59



EXTI_enuErrorStatus_t EXTI_enuEnableInterrupt(u8 Copy_u8IntNum)
{
	u8 Local_u8ErrorStatus = EXTI_enuOk;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
	if( Copy_u8IntNum > EXTI_Num )
	{
		Local_u8ErrorStatus = EXTI_enuInValidIntNum;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	

	return Local_u8ErrorStatus;
 3b2:	08 95       	ret

000003b4 <Globint_voidEnableGlobalInt>:


void Globint_voidEnableGlobalInt(void)
{
    
    SET_BIT(SREG,I_BIT);
 3b4:	8f b7       	in	r24, 0x3f	; 63
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	8f bf       	out	0x3f, r24	; 63
 3ba:	08 95       	ret

000003bc <LED_enuOn>:


LED_tenuErrorStatus LED_enuOn( LED_tenuPins Copy_u8PinNumber )
{
    LED_tenuErrorStatus Local_u8ErrorStatus = LED_enuOk;
    DIO_enuSetPin( Copy_u8PinNumber , DIO_enuHigh );
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>

    return Local_u8ErrorStatus;
}
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret

000003c6 <main>:


int main(void)
{
	u8 Local_u8PinValue = 0;
    DIO_enuInit();
 3c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuInit>
	EXTI_enuInitInterrupt();
 3ca:	0e 94 b6 01 	call	0x36c	; 0x36c <EXTI_enuInitInterrupt>
	EXTI_enuEnableInterrupt(1);
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 c3 01 	call	0x386	; 0x386 <EXTI_enuEnableInterrupt>
	Globint_voidEnableGlobalInt();
 3d4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Globint_voidEnableGlobalInt>
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <main+0x12>

000003da <__vector_2>:
    }
	return 0;
}

void __vector_2(void) __attribute__((interrupt));
void __vector_2(void) {
 3da:	78 94       	sei
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
	LED_enuOn( DIO_enuPin28);
 3fe:	8c e1       	ldi	r24, 0x1C	; 28
 400:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_enuOn>
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
