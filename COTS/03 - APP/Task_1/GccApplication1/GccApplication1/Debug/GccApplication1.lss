
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000077c  000007f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f76  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000770  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062b  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00002640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069c  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000883  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  0000362b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 23 02 	call	0x446	; 0x446 <main>
  7a:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
		
	}


	return Local_u8ErrorStatus;
}
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	d4 c0       	rjmp	.+424    	; 0x22e <DIO_enuInit+0x1ac>
  86:	98 2f       	mov	r25, r24
  88:	96 95       	lsr	r25
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
  8e:	28 2f       	mov	r18, r24
  90:	27 70       	andi	r18, 0x07	; 7
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	c9 f1       	breq	.+114    	; 0x108 <DIO_enuInit+0x86>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_enuInit+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_enuInit+0x1c>
  9c:	66 c0       	rjmp	.+204    	; 0x16a <DIO_enuInit+0xe8>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_enuInit+0x22>
  a2:	94 c0       	rjmp	.+296    	; 0x1cc <DIO_enuInit+0x14a>
  a4:	c3 c0       	rjmp	.+390    	; 0x22c <DIO_enuInit+0x1aa>
  a6:	48 2f       	mov	r20, r24
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	fa 01       	movw	r30, r20
  ac:	ee 0f       	add	r30, r30
  ae:	ff 1f       	adc	r31, r31
  b0:	e0 5a       	subi	r30, 0xA0	; 160
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	90 81       	ld	r25, Z
  b6:	91 30       	cpi	r25, 0x01	; 1
  b8:	69 f4       	brne	.+26     	; 0xd4 <DIO_enuInit+0x52>
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	ba 01       	movw	r22, r20
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_enuInit+0x46>
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_enuInit+0x42>
  cc:	9b 01       	movw	r18, r22
  ce:	29 2b       	or	r18, r25
  d0:	2a bb       	out	0x1a, r18	; 26
  d2:	ac c0       	rjmp	.+344    	; 0x22c <DIO_enuInit+0x1aa>
  d4:	9a b3       	in	r25, 0x1a	; 26
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	fb 01       	movw	r30, r22
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_enuInit+0x60>
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_enuInit+0x5c>
  e6:	9f 01       	movw	r18, r30
  e8:	6e 2f       	mov	r22, r30
  ea:	60 95       	com	r22
  ec:	96 23       	and	r25, r22
  ee:	9a bb       	out	0x1a, r25	; 26
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	fa 01       	movw	r30, r20
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	91 11       	cpse	r25, r1
  fe:	96 c0       	rjmp	.+300    	; 0x22c <DIO_enuInit+0x1aa>
 100:	9b b3       	in	r25, 0x1b	; 27
 102:	29 2b       	or	r18, r25
 104:	2b bb       	out	0x1b, r18	; 27
 106:	92 c0       	rjmp	.+292    	; 0x22c <DIO_enuInit+0x1aa>
 108:	48 2f       	mov	r20, r24
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	fa 01       	movw	r30, r20
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	90 81       	ld	r25, Z
 118:	91 30       	cpi	r25, 0x01	; 1
 11a:	69 f4       	brne	.+26     	; 0x136 <DIO_enuInit+0xb4>
 11c:	97 b3       	in	r25, 0x17	; 23
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	ba 01       	movw	r22, r20
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_enuInit+0xa8>
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_enuInit+0xa4>
 12e:	9b 01       	movw	r18, r22
 130:	29 2b       	or	r18, r25
 132:	27 bb       	out	0x17, r18	; 23
 134:	7b c0       	rjmp	.+246    	; 0x22c <DIO_enuInit+0x1aa>
 136:	97 b3       	in	r25, 0x17	; 23
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	fb 01       	movw	r30, r22
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_enuInit+0xc2>
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	2a 95       	dec	r18
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_enuInit+0xbe>
 148:	9f 01       	movw	r18, r30
 14a:	6e 2f       	mov	r22, r30
 14c:	60 95       	com	r22
 14e:	96 23       	and	r25, r22
 150:	97 bb       	out	0x17, r25	; 23
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	fa 01       	movw	r30, r20
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	91 11       	cpse	r25, r1
 160:	65 c0       	rjmp	.+202    	; 0x22c <DIO_enuInit+0x1aa>
 162:	98 b3       	in	r25, 0x18	; 24
 164:	29 2b       	or	r18, r25
 166:	28 bb       	out	0x18, r18	; 24
 168:	61 c0       	rjmp	.+194    	; 0x22c <DIO_enuInit+0x1aa>
 16a:	48 2f       	mov	r20, r24
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	fa 01       	movw	r30, r20
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e0 5a       	subi	r30, 0xA0	; 160
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	90 81       	ld	r25, Z
 17a:	91 30       	cpi	r25, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_enuInit+0x116>
 17e:	94 b3       	in	r25, 0x14	; 20
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	ba 01       	movw	r22, r20
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_enuInit+0x10a>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_enuInit+0x106>
 190:	9b 01       	movw	r18, r22
 192:	29 2b       	or	r18, r25
 194:	24 bb       	out	0x14, r18	; 20
 196:	4a c0       	rjmp	.+148    	; 0x22c <DIO_enuInit+0x1aa>
 198:	94 b3       	in	r25, 0x14	; 20
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	fb 01       	movw	r30, r22
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_enuInit+0x124>
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_enuInit+0x120>
 1aa:	9f 01       	movw	r18, r30
 1ac:	6e 2f       	mov	r22, r30
 1ae:	60 95       	com	r22
 1b0:	96 23       	and	r25, r22
 1b2:	94 bb       	out	0x14, r25	; 20
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	fa 01       	movw	r30, r20
 1ba:	e0 5a       	subi	r30, 0xA0	; 160
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	91 11       	cpse	r25, r1
 1c2:	34 c0       	rjmp	.+104    	; 0x22c <DIO_enuInit+0x1aa>
 1c4:	95 b3       	in	r25, 0x15	; 21
 1c6:	29 2b       	or	r18, r25
 1c8:	25 bb       	out	0x15, r18	; 21
 1ca:	30 c0       	rjmp	.+96     	; 0x22c <DIO_enuInit+0x1aa>
 1cc:	48 2f       	mov	r20, r24
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	fa 01       	movw	r30, r20
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	90 81       	ld	r25, Z
 1dc:	91 30       	cpi	r25, 0x01	; 1
 1de:	69 f4       	brne	.+26     	; 0x1fa <DIO_enuInit+0x178>
 1e0:	91 b3       	in	r25, 0x11	; 17
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	ba 01       	movw	r22, r20
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_enuInit+0x16c>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_enuInit+0x168>
 1f2:	9b 01       	movw	r18, r22
 1f4:	29 2b       	or	r18, r25
 1f6:	21 bb       	out	0x11, r18	; 17
 1f8:	19 c0       	rjmp	.+50     	; 0x22c <DIO_enuInit+0x1aa>
 1fa:	91 b3       	in	r25, 0x11	; 17
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	fb 01       	movw	r30, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_enuInit+0x186>
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_enuInit+0x182>
 20c:	9f 01       	movw	r18, r30
 20e:	6e 2f       	mov	r22, r30
 210:	60 95       	com	r22
 212:	96 23       	and	r25, r22
 214:	91 bb       	out	0x11, r25	; 17
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	fa 01       	movw	r30, r20
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	91 11       	cpse	r25, r1
 224:	03 c0       	rjmp	.+6      	; 0x22c <DIO_enuInit+0x1aa>
 226:	92 b3       	in	r25, 0x12	; 18
 228:	29 2b       	or	r18, r25
 22a:	22 bb       	out	0x12, r18	; 18
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 32       	cpi	r24, 0x20	; 32
 230:	08 f4       	brcc	.+2      	; 0x234 <DIO_enuInit+0x1b2>
 232:	29 cf       	rjmp	.-430    	; 0x86 <DIO_enuInit+0x4>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <DIO_enuSetPin>:


DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS)
 238:	80 32       	cpi	r24, 0x20	; 32
 23a:	08 f0       	brcs	.+2      	; 0x23e <DIO_enuSetPin+0x6>
 23c:	8b c0       	rjmp	.+278    	; 0x354 <DIO_enuSetPin+0x11c>
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
	}
	else
	{

		u8 Local_u8PortNumber = Copy_u8PinNumber/NumberOfPin;
 23e:	98 2f       	mov	r25, r24
 240:	96 95       	lsr	r25
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
		u8 Local_u8PinNumber = Copy_u8PinNumber%NumberOfPin;
 246:	87 70       	andi	r24, 0x07	; 7

		switch (Local_u8PortNumber)
 248:	91 30       	cpi	r25, 0x01	; 1
 24a:	39 f1       	breq	.+78     	; 0x29a <DIO_enuSetPin+0x62>
 24c:	38 f0       	brcs	.+14     	; 0x25c <DIO_enuSetPin+0x24>
 24e:	92 30       	cpi	r25, 0x02	; 2
 250:	09 f4       	brne	.+2      	; 0x254 <DIO_enuSetPin+0x1c>
 252:	42 c0       	rjmp	.+132    	; 0x2d8 <DIO_enuSetPin+0xa0>
 254:	93 30       	cpi	r25, 0x03	; 3
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_enuSetPin+0x22>
 258:	5e c0       	rjmp	.+188    	; 0x316 <DIO_enuSetPin+0xde>
 25a:	7e c0       	rjmp	.+252    	; 0x358 <DIO_enuSetPin+0x120>
		{
			case (DIO_PORTA):
			if( Copy_enuPinValue == DIO_enuHigh )
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	71 f4       	brne	.+28     	; 0x27c <DIO_enuSetPin+0x44>
			{
				SET_BIT(PORTA,Local_u8PinNumber);
 260:	4b b3       	in	r20, 0x1b	; 27
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_enuSetPin+0x36>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	8a 95       	dec	r24
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_enuSetPin+0x32>
 272:	cb 01       	movw	r24, r22
 274:	84 2b       	or	r24, r20
 276:	8b bb       	out	0x1b, r24	; 27



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
			{
				SET_BIT(PORTA,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTA,Local_u8PinNumber);
 27c:	4b b3       	in	r20, 0x1b	; 27
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enuSetPin+0x52>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enuSetPin+0x4e>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	8b bb       	out	0x1b, r24	; 27



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
				CLR_BIT(PORTA,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTB):

			if( Copy_enuPinValue == DIO_enuHigh )
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	71 f4       	brne	.+28     	; 0x2ba <DIO_enuSetPin+0x82>
			{
				SET_BIT(PORTB,Local_u8PinNumber);
 29e:	48 b3       	in	r20, 0x18	; 24
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	b9 01       	movw	r22, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_enuSetPin+0x74>
 2a8:	66 0f       	add	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	8a 95       	dec	r24
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_enuSetPin+0x70>
 2b0:	cb 01       	movw	r24, r22
 2b2:	84 2b       	or	r24, r20
 2b4:	88 bb       	out	0x18, r24	; 24



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
			{
				SET_BIT(PORTB,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTB,Local_u8PinNumber);
 2ba:	48 b3       	in	r20, 0x18	; 24
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	b9 01       	movw	r22, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_enuSetPin+0x90>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_enuSetPin+0x8c>
 2cc:	cb 01       	movw	r24, r22
 2ce:	80 95       	com	r24
 2d0:	84 23       	and	r24, r20
 2d2:	88 bb       	out	0x18, r24	; 24



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
			{
				CLR_BIT(PORTB,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTC):
			if( Copy_enuPinValue == DIO_enuHigh )
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	71 f4       	brne	.+28     	; 0x2f8 <DIO_enuSetPin+0xc0>
			{
				SET_BIT(PORTC,Local_u8PinNumber);
 2dc:	45 b3       	in	r20, 0x15	; 21
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	b9 01       	movw	r22, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_enuSetPin+0xb2>
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	8a 95       	dec	r24
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_enuSetPin+0xae>
 2ee:	cb 01       	movw	r24, r22
 2f0:	84 2b       	or	r24, r20
 2f2:	85 bb       	out	0x15, r24	; 21



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	08 95       	ret
			{
				SET_BIT(PORTC,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTC,Local_u8PinNumber);
 2f8:	45 b3       	in	r20, 0x15	; 21
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	b9 01       	movw	r22, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_enuSetPin+0xce>
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	8a 95       	dec	r24
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_enuSetPin+0xca>
 30a:	cb 01       	movw	r24, r22
 30c:	80 95       	com	r24
 30e:	84 23       	and	r24, r20
 310:	85 bb       	out	0x15, r24	; 21



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
			{
				CLR_BIT(PORTC,Local_u8PinNumber);
			}
			break;
			case (DIO_PORTD):
			if( Copy_enuPinValue == DIO_enuHigh )
 316:	61 30       	cpi	r22, 0x01	; 1
 318:	71 f4       	brne	.+28     	; 0x336 <DIO_enuSetPin+0xfe>
			{
				SET_BIT(PORTD,Local_u8PinNumber);
 31a:	42 b3       	in	r20, 0x12	; 18
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	b9 01       	movw	r22, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_enuSetPin+0xf0>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	8a 95       	dec	r24
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_enuSetPin+0xec>
 32c:	cb 01       	movw	r24, r22
 32e:	84 2b       	or	r24, r20
 330:	82 bb       	out	0x12, r24	; 18



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret
			{
				SET_BIT(PORTD,Local_u8PinNumber);
			}
			else
			{
				CLR_BIT(PORTD,Local_u8PinNumber);
 336:	42 b3       	in	r20, 0x12	; 18
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_enuSetPin+0x10c>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_enuSetPin+0x108>
 348:	cb 01       	movw	r24, r22
 34a:	80 95       	com	r24
 34c:	84 23       	and	r24, r20
 34e:	82 bb       	out	0x12, r24	; 18



DIO_tenuErrorStatus DIO_enuSetPin(DIO_tPinValue Copy_u8PinNumber, DIO_tPinValue Copy_enuPinValue)
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
	if ( Copy_u8PinNumber > MAX_NUM_OF_PINS)
	{
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	08 95       	ret
			{
				CLR_BIT(PORTD,Local_u8PinNumber);
			}
			break;
			default:
			Local_u8ErrorStatus = DIO_enuNotOk;
 358:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return Local_u8ErrorStatus;

}
 35a:	08 95       	ret

0000035c <DIO_enuTogglePin>:

DIO_tenuErrorStatus DIO_enuTogglePin( DIO_tPinValue Copy_u8PinNumber )
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
	if ( Copy_u8PinNumber > 31)
 35c:	80 32       	cpi	r24, 0x20	; 32
 35e:	08 f0       	brcs	.+2      	; 0x362 <DIO_enuTogglePin+0x6>
 360:	45 c0       	rjmp	.+138    	; 0x3ec <DIO_enuTogglePin+0x90>
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
	}
	else
	{

		u8 Local_u8PortNumber = Copy_u8PinNumber/NumberOfPin;
 362:	98 2f       	mov	r25, r24
 364:	96 95       	lsr	r25
 366:	96 95       	lsr	r25
 368:	96 95       	lsr	r25
		u8 Local_u8PinNumber = Copy_u8PinNumber%NumberOfPin;
 36a:	87 70       	andi	r24, 0x07	; 7

		switch (Local_u8PortNumber)
 36c:	91 30       	cpi	r25, 0x01	; 1
 36e:	a1 f0       	breq	.+40     	; 0x398 <DIO_enuTogglePin+0x3c>
 370:	28 f0       	brcs	.+10     	; 0x37c <DIO_enuTogglePin+0x20>
 372:	92 30       	cpi	r25, 0x02	; 2
 374:	f9 f0       	breq	.+62     	; 0x3b4 <DIO_enuTogglePin+0x58>
 376:	93 30       	cpi	r25, 0x03	; 3
 378:	59 f1       	breq	.+86     	; 0x3d0 <DIO_enuTogglePin+0x74>
 37a:	3a c0       	rjmp	.+116    	; 0x3f0 <DIO_enuTogglePin+0x94>
		{
			case (DIO_PORTA):
			TOG_BIT(PORTA,Local_u8PinNumber);
 37c:	4b b3       	in	r20, 0x1b	; 27
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_enuTogglePin+0x2e>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_enuTogglePin+0x2a>
 38e:	cb 01       	movw	r24, r22
 390:	84 27       	eor	r24, r20
 392:	8b bb       	out	0x1b, r24	; 27

}

DIO_tenuErrorStatus DIO_enuTogglePin( DIO_tPinValue Copy_u8PinNumber )
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 394:	80 e0       	ldi	r24, 0x00	; 0

		switch (Local_u8PortNumber)
		{
			case (DIO_PORTA):
			TOG_BIT(PORTA,Local_u8PinNumber);
			break;
 396:	08 95       	ret
			case (DIO_PORTB):
			TOG_BIT(PORTB,Local_u8PinNumber);
 398:	48 b3       	in	r20, 0x18	; 24
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_enuTogglePin+0x4a>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_enuTogglePin+0x46>
 3aa:	cb 01       	movw	r24, r22
 3ac:	84 27       	eor	r24, r20
 3ae:	88 bb       	out	0x18, r24	; 24

}

DIO_tenuErrorStatus DIO_enuTogglePin( DIO_tPinValue Copy_u8PinNumber )
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
			case (DIO_PORTA):
			TOG_BIT(PORTA,Local_u8PinNumber);
			break;
			case (DIO_PORTB):
			TOG_BIT(PORTB,Local_u8PinNumber);
			break;
 3b2:	08 95       	ret
			case (DIO_PORTC):
			TOG_BIT(PORTC,Local_u8PinNumber);
 3b4:	45 b3       	in	r20, 0x15	; 21
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_enuTogglePin+0x66>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_enuTogglePin+0x62>
 3c6:	cb 01       	movw	r24, r22
 3c8:	84 27       	eor	r24, r20
 3ca:	85 bb       	out	0x15, r24	; 21

}

DIO_tenuErrorStatus DIO_enuTogglePin( DIO_tPinValue Copy_u8PinNumber )
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
			case (DIO_PORTB):
			TOG_BIT(PORTB,Local_u8PinNumber);
			break;
			case (DIO_PORTC):
			TOG_BIT(PORTC,Local_u8PinNumber);
			break;
 3ce:	08 95       	ret
			case (DIO_PORTD):
			TOG_BIT(PORTD,Local_u8PinNumber);
 3d0:	42 b3       	in	r20, 0x12	; 18
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	b9 01       	movw	r22, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_enuTogglePin+0x82>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	8a 95       	dec	r24
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_enuTogglePin+0x7e>
 3e2:	cb 01       	movw	r24, r22
 3e4:	84 27       	eor	r24, r20
 3e6:	82 bb       	out	0x12, r24	; 18

}

DIO_tenuErrorStatus DIO_enuTogglePin( DIO_tPinValue Copy_u8PinNumber )
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
			case (DIO_PORTC):
			TOG_BIT(PORTC,Local_u8PinNumber);
			break;
			case (DIO_PORTD):
			TOG_BIT(PORTD,Local_u8PinNumber);
			break;
 3ea:	08 95       	ret
DIO_tenuErrorStatus DIO_enuTogglePin( DIO_tPinValue Copy_u8PinNumber )
{
	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
	if ( Copy_u8PinNumber > 31)
	{
		Local_u8ErrorStatus = DIO_enuInvalidPinNumber;
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	08 95       	ret
			break;
			case (DIO_PORTD):
			TOG_BIT(PORTD,Local_u8PinNumber);
			break;
			default:
			Local_u8ErrorStatus = DIO_enuNotOk;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return Local_u8ErrorStatus;

 3f2:	08 95       	ret

000003f4 <LED_enuOn>:
    DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
	
    DIO_enuSetPin( Copy_u8PinNumber , DIO_enuLow );

    return Local_u8ErrorStatus;
}
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_enuSetPin>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret

000003fe <LED_enuToggle>:

DIO_tenuErrorStatus LED_enuToggle( DIO_tenuPins Copy_u8PinNumber )
{
    DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
    DIO_enuTogglePin(Copy_u8PinNumber);
 3fe:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_enuTogglePin>

    return Local_u8ErrorStatus;

}
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret

00000406 <delay_ms_iti>:


void delay_ms_iti(unsigned long int Copy_Count)
{
	unsigned long int i;
	Copy_Count = (u32)((f32)Copy_Count*((f32)F_CPU/1000000.0)*91.2);
 406:	0e 94 c1 02 	call	0x582	; 0x582 <__floatunsisf>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	51 e4       	ldi	r21, 0x41	; 65
 412:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 416:	26 e6       	ldi	r18, 0x66	; 102
 418:	36 e6       	ldi	r19, 0x66	; 102
 41a:	46 eb       	ldi	r20, 0xB6	; 182
 41c:	52 e4       	ldi	r21, 0x42	; 66
 41e:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 422:	0e 94 92 02 	call	0x524	; 0x524 <__fixunssfsi>
 426:	ab 01       	movw	r20, r22
 428:	bc 01       	movw	r22, r24
	for ( i = 0 ; i < Copy_Count ; i++ )
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	dc 01       	movw	r26, r24
 430:	04 c0       	rjmp	.+8      	; 0x43a <delay_ms_iti+0x34>
	{

		asm("NOP");
 432:	00 00       	nop

void delay_ms_iti(unsigned long int Copy_Count)
{
	unsigned long int i;
	Copy_Count = (u32)((f32)Copy_Count*((f32)F_CPU/1000000.0)*91.2);
	for ( i = 0 ; i < Copy_Count ; i++ )
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	a1 1d       	adc	r26, r1
 438:	b1 1d       	adc	r27, r1
 43a:	84 17       	cp	r24, r20
 43c:	95 07       	cpc	r25, r21
 43e:	a6 07       	cpc	r26, r22
 440:	b7 07       	cpc	r27, r23
 442:	b8 f3       	brcs	.-18     	; 0x432 <delay_ms_iti+0x2c>
	{

		asm("NOP");
	}
	
}
 444:	08 95       	ret

00000446 <main>:



int main(void)
{
	DIO_enuInit();
 446:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
		//
		//}
	
		
		/*Task 1 Led Animation*/
		LED_enuOn(DIO_enuPin28);
 44a:	8c e1       	ldi	r24, 0x1C	; 28
 44c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_enuOn>
		delay_ms_iti(500);
 450:	64 ef       	ldi	r22, 0xF4	; 244
 452:	71 e0       	ldi	r23, 0x01	; 1
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuToggle(DIO_enuPin28);
 45c:	8c e1       	ldi	r24, 0x1C	; 28
 45e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LED_enuToggle>
		delay_ms_iti(500);
 462:	64 ef       	ldi	r22, 0xF4	; 244
 464:	71 e0       	ldi	r23, 0x01	; 1
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuOn(DIO_enuPin29);
 46e:	8d e1       	ldi	r24, 0x1D	; 29
 470:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_enuOn>
		delay_ms_iti(500);
 474:	64 ef       	ldi	r22, 0xF4	; 244
 476:	71 e0       	ldi	r23, 0x01	; 1
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuToggle(DIO_enuPin29);
 480:	8d e1       	ldi	r24, 0x1D	; 29
 482:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LED_enuToggle>
		delay_ms_iti(500);
 486:	64 ef       	ldi	r22, 0xF4	; 244
 488:	71 e0       	ldi	r23, 0x01	; 1
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuOn(DIO_enuPin30);
 492:	8e e1       	ldi	r24, 0x1E	; 30
 494:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_enuOn>
		delay_ms_iti(500);
 498:	64 ef       	ldi	r22, 0xF4	; 244
 49a:	71 e0       	ldi	r23, 0x01	; 1
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuToggle(DIO_enuPin30);
 4a4:	8e e1       	ldi	r24, 0x1E	; 30
 4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LED_enuToggle>
		delay_ms_iti(500);
 4aa:	64 ef       	ldi	r22, 0xF4	; 244
 4ac:	71 e0       	ldi	r23, 0x01	; 1
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuOn(DIO_enuPin31);
 4b6:	8f e1       	ldi	r24, 0x1F	; 31
 4b8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_enuOn>
		delay_ms_iti(500);
 4bc:	64 ef       	ldi	r22, 0xF4	; 244
 4be:	71 e0       	ldi	r23, 0x01	; 1
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuToggle(DIO_enuPin31);
 4c8:	8f e1       	ldi	r24, 0x1F	; 31
 4ca:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LED_enuToggle>
		delay_ms_iti(500);
 4ce:	64 ef       	ldi	r22, 0xF4	; 244
 4d0:	71 e0       	ldi	r23, 0x01	; 1
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuOn(DIO_enuPin30);
 4da:	8e e1       	ldi	r24, 0x1E	; 30
 4dc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_enuOn>
		delay_ms_iti(500);
 4e0:	64 ef       	ldi	r22, 0xF4	; 244
 4e2:	71 e0       	ldi	r23, 0x01	; 1
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuToggle(DIO_enuPin30);
 4ec:	8e e1       	ldi	r24, 0x1E	; 30
 4ee:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LED_enuToggle>
		delay_ms_iti(500);
 4f2:	64 ef       	ldi	r22, 0xF4	; 244
 4f4:	71 e0       	ldi	r23, 0x01	; 1
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuOn(DIO_enuPin29);
 4fe:	8d e1       	ldi	r24, 0x1D	; 29
 500:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LED_enuOn>
		delay_ms_iti(500);
 504:	64 ef       	ldi	r22, 0xF4	; 244
 506:	71 e0       	ldi	r23, 0x01	; 1
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
		LED_enuToggle(DIO_enuPin29);
 510:	8d e1       	ldi	r24, 0x1D	; 29
 512:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LED_enuToggle>
		delay_ms_iti(500);
 516:	64 ef       	ldi	r22, 0xF4	; 244
 518:	71 e0       	ldi	r23, 0x01	; 1
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 03 02 	call	0x406	; 0x406 <delay_ms_iti>
 522:	93 cf       	rjmp	.-218    	; 0x44a <main+0x4>

00000524 <__fixunssfsi>:
 524:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_splitA>
 528:	88 f0       	brcs	.+34     	; 0x54c <__fixunssfsi+0x28>
 52a:	9f 57       	subi	r25, 0x7F	; 127
 52c:	98 f0       	brcs	.+38     	; 0x554 <__fixunssfsi+0x30>
 52e:	b9 2f       	mov	r27, r25
 530:	99 27       	eor	r25, r25
 532:	b7 51       	subi	r27, 0x17	; 23
 534:	b0 f0       	brcs	.+44     	; 0x562 <__fixunssfsi+0x3e>
 536:	e1 f0       	breq	.+56     	; 0x570 <__fixunssfsi+0x4c>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	1a f0       	brmi	.+6      	; 0x548 <__fixunssfsi+0x24>
 542:	ba 95       	dec	r27
 544:	c9 f7       	brne	.-14     	; 0x538 <__fixunssfsi+0x14>
 546:	14 c0       	rjmp	.+40     	; 0x570 <__fixunssfsi+0x4c>
 548:	b1 30       	cpi	r27, 0x01	; 1
 54a:	91 f0       	breq	.+36     	; 0x570 <__fixunssfsi+0x4c>
 54c:	0e 94 20 03 	call	0x640	; 0x640 <__fp_zero>
 550:	b1 e0       	ldi	r27, 0x01	; 1
 552:	08 95       	ret
 554:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_zero>
 558:	67 2f       	mov	r22, r23
 55a:	78 2f       	mov	r23, r24
 55c:	88 27       	eor	r24, r24
 55e:	b8 5f       	subi	r27, 0xF8	; 248
 560:	39 f0       	breq	.+14     	; 0x570 <__fixunssfsi+0x4c>
 562:	b9 3f       	cpi	r27, 0xF9	; 249
 564:	cc f3       	brlt	.-14     	; 0x558 <__fixunssfsi+0x34>
 566:	86 95       	lsr	r24
 568:	77 95       	ror	r23
 56a:	67 95       	ror	r22
 56c:	b3 95       	inc	r27
 56e:	d9 f7       	brne	.-10     	; 0x566 <__fixunssfsi+0x42>
 570:	3e f4       	brtc	.+14     	; 0x580 <__fixunssfsi+0x5c>
 572:	90 95       	com	r25
 574:	80 95       	com	r24
 576:	70 95       	com	r23
 578:	61 95       	neg	r22
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	08 95       	ret

00000582 <__floatunsisf>:
 582:	e8 94       	clt
 584:	09 c0       	rjmp	.+18     	; 0x598 <__floatsisf+0x12>

00000586 <__floatsisf>:
 586:	97 fb       	bst	r25, 7
 588:	3e f4       	brtc	.+14     	; 0x598 <__floatsisf+0x12>
 58a:	90 95       	com	r25
 58c:	80 95       	com	r24
 58e:	70 95       	com	r23
 590:	61 95       	neg	r22
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	99 23       	and	r25, r25
 59a:	a9 f0       	breq	.+42     	; 0x5c6 <__floatsisf+0x40>
 59c:	f9 2f       	mov	r31, r25
 59e:	96 e9       	ldi	r25, 0x96	; 150
 5a0:	bb 27       	eor	r27, r27
 5a2:	93 95       	inc	r25
 5a4:	f6 95       	lsr	r31
 5a6:	87 95       	ror	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b7 95       	ror	r27
 5ae:	f1 11       	cpse	r31, r1
 5b0:	f8 cf       	rjmp	.-16     	; 0x5a2 <__floatsisf+0x1c>
 5b2:	fa f4       	brpl	.+62     	; 0x5f2 <__floatsisf+0x6c>
 5b4:	bb 0f       	add	r27, r27
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__floatsisf+0x36>
 5b8:	60 ff       	sbrs	r22, 0
 5ba:	1b c0       	rjmp	.+54     	; 0x5f2 <__floatsisf+0x6c>
 5bc:	6f 5f       	subi	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	16 c0       	rjmp	.+44     	; 0x5f2 <__floatsisf+0x6c>
 5c6:	88 23       	and	r24, r24
 5c8:	11 f0       	breq	.+4      	; 0x5ce <__floatsisf+0x48>
 5ca:	96 e9       	ldi	r25, 0x96	; 150
 5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <__floatsisf+0x6a>
 5ce:	77 23       	and	r23, r23
 5d0:	21 f0       	breq	.+8      	; 0x5da <__floatsisf+0x54>
 5d2:	9e e8       	ldi	r25, 0x8E	; 142
 5d4:	87 2f       	mov	r24, r23
 5d6:	76 2f       	mov	r23, r22
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <__floatsisf+0x5e>
 5da:	66 23       	and	r22, r22
 5dc:	71 f0       	breq	.+28     	; 0x5fa <__floatsisf+0x74>
 5de:	96 e8       	ldi	r25, 0x86	; 134
 5e0:	86 2f       	mov	r24, r22
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	2a f0       	brmi	.+10     	; 0x5f2 <__floatsisf+0x6c>
 5e8:	9a 95       	dec	r25
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	da f7       	brpl	.-10     	; 0x5e8 <__floatsisf+0x62>
 5f2:	88 0f       	add	r24, r24
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__fp_split3>:
 5fc:	57 fd       	sbrc	r21, 7
 5fe:	90 58       	subi	r25, 0x80	; 128
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	59 f0       	breq	.+22     	; 0x61c <__fp_splitA+0x10>
 606:	5f 3f       	cpi	r21, 0xFF	; 255
 608:	71 f0       	breq	.+28     	; 0x626 <__fp_splitA+0x1a>
 60a:	47 95       	ror	r20

0000060c <__fp_splitA>:
 60c:	88 0f       	add	r24, r24
 60e:	97 fb       	bst	r25, 7
 610:	99 1f       	adc	r25, r25
 612:	61 f0       	breq	.+24     	; 0x62c <__fp_splitA+0x20>
 614:	9f 3f       	cpi	r25, 0xFF	; 255
 616:	79 f0       	breq	.+30     	; 0x636 <__fp_splitA+0x2a>
 618:	87 95       	ror	r24
 61a:	08 95       	ret
 61c:	12 16       	cp	r1, r18
 61e:	13 06       	cpc	r1, r19
 620:	14 06       	cpc	r1, r20
 622:	55 1f       	adc	r21, r21
 624:	f2 cf       	rjmp	.-28     	; 0x60a <__fp_split3+0xe>
 626:	46 95       	lsr	r20
 628:	f1 df       	rcall	.-30     	; 0x60c <__fp_splitA>
 62a:	08 c0       	rjmp	.+16     	; 0x63c <__fp_splitA+0x30>
 62c:	16 16       	cp	r1, r22
 62e:	17 06       	cpc	r1, r23
 630:	18 06       	cpc	r1, r24
 632:	99 1f       	adc	r25, r25
 634:	f1 cf       	rjmp	.-30     	; 0x618 <__fp_splitA+0xc>
 636:	86 95       	lsr	r24
 638:	71 05       	cpc	r23, r1
 63a:	61 05       	cpc	r22, r1
 63c:	08 94       	sec
 63e:	08 95       	ret

00000640 <__fp_zero>:
 640:	e8 94       	clt

00000642 <__fp_szero>:
 642:	bb 27       	eor	r27, r27
 644:	66 27       	eor	r22, r22
 646:	77 27       	eor	r23, r23
 648:	cb 01       	movw	r24, r22
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret

0000064e <__mulsf3>:
 64e:	0e 94 3a 03 	call	0x674	; 0x674 <__mulsf3x>
 652:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_round>
 656:	0e 94 9d 03 	call	0x73a	; 0x73a <__fp_pscA>
 65a:	38 f0       	brcs	.+14     	; 0x66a <__mulsf3+0x1c>
 65c:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscB>
 660:	20 f0       	brcs	.+8      	; 0x66a <__mulsf3+0x1c>
 662:	95 23       	and	r25, r21
 664:	11 f0       	breq	.+4      	; 0x66a <__mulsf3+0x1c>
 666:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_inf>
 66a:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_nan>
 66e:	11 24       	eor	r1, r1
 670:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_szero>

00000674 <__mulsf3x>:
 674:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_split3>
 678:	70 f3       	brcs	.-36     	; 0x656 <__mulsf3+0x8>

0000067a <__mulsf3_pse>:
 67a:	95 9f       	mul	r25, r21
 67c:	c1 f3       	breq	.-16     	; 0x66e <__mulsf3+0x20>
 67e:	95 0f       	add	r25, r21
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	55 1f       	adc	r21, r21
 684:	62 9f       	mul	r22, r18
 686:	f0 01       	movw	r30, r0
 688:	72 9f       	mul	r23, r18
 68a:	bb 27       	eor	r27, r27
 68c:	f0 0d       	add	r31, r0
 68e:	b1 1d       	adc	r27, r1
 690:	63 9f       	mul	r22, r19
 692:	aa 27       	eor	r26, r26
 694:	f0 0d       	add	r31, r0
 696:	b1 1d       	adc	r27, r1
 698:	aa 1f       	adc	r26, r26
 69a:	64 9f       	mul	r22, r20
 69c:	66 27       	eor	r22, r22
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	66 1f       	adc	r22, r22
 6a4:	82 9f       	mul	r24, r18
 6a6:	22 27       	eor	r18, r18
 6a8:	b0 0d       	add	r27, r0
 6aa:	a1 1d       	adc	r26, r1
 6ac:	62 1f       	adc	r22, r18
 6ae:	73 9f       	mul	r23, r19
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	62 1f       	adc	r22, r18
 6b6:	83 9f       	mul	r24, r19
 6b8:	a0 0d       	add	r26, r0
 6ba:	61 1d       	adc	r22, r1
 6bc:	22 1f       	adc	r18, r18
 6be:	74 9f       	mul	r23, r20
 6c0:	33 27       	eor	r19, r19
 6c2:	a0 0d       	add	r26, r0
 6c4:	61 1d       	adc	r22, r1
 6c6:	23 1f       	adc	r18, r19
 6c8:	84 9f       	mul	r24, r20
 6ca:	60 0d       	add	r22, r0
 6cc:	21 1d       	adc	r18, r1
 6ce:	82 2f       	mov	r24, r18
 6d0:	76 2f       	mov	r23, r22
 6d2:	6a 2f       	mov	r22, r26
 6d4:	11 24       	eor	r1, r1
 6d6:	9f 57       	subi	r25, 0x7F	; 127
 6d8:	50 40       	sbci	r21, 0x00	; 0
 6da:	9a f0       	brmi	.+38     	; 0x702 <__mulsf3_pse+0x88>
 6dc:	f1 f0       	breq	.+60     	; 0x71a <__mulsf3_pse+0xa0>
 6de:	88 23       	and	r24, r24
 6e0:	4a f0       	brmi	.+18     	; 0x6f4 <__mulsf3_pse+0x7a>
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	bb 1f       	adc	r27, r27
 6e8:	66 1f       	adc	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	91 50       	subi	r25, 0x01	; 1
 6f0:	50 40       	sbci	r21, 0x00	; 0
 6f2:	a9 f7       	brne	.-22     	; 0x6de <__mulsf3_pse+0x64>
 6f4:	9e 3f       	cpi	r25, 0xFE	; 254
 6f6:	51 05       	cpc	r21, r1
 6f8:	80 f0       	brcs	.+32     	; 0x71a <__mulsf3_pse+0xa0>
 6fa:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_inf>
 6fe:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_szero>
 702:	5f 3f       	cpi	r21, 0xFF	; 255
 704:	e4 f3       	brlt	.-8      	; 0x6fe <__mulsf3_pse+0x84>
 706:	98 3e       	cpi	r25, 0xE8	; 232
 708:	d4 f3       	brlt	.-12     	; 0x6fe <__mulsf3_pse+0x84>
 70a:	86 95       	lsr	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f7 95       	ror	r31
 714:	e7 95       	ror	r30
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	c1 f7       	brne	.-16     	; 0x70a <__mulsf3_pse+0x90>
 71a:	fe 2b       	or	r31, r30
 71c:	88 0f       	add	r24, r24
 71e:	91 1d       	adc	r25, r1
 720:	96 95       	lsr	r25
 722:	87 95       	ror	r24
 724:	97 f9       	bld	r25, 7
 726:	08 95       	ret

00000728 <__fp_inf>:
 728:	97 f9       	bld	r25, 7
 72a:	9f 67       	ori	r25, 0x7F	; 127
 72c:	80 e8       	ldi	r24, 0x80	; 128
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	08 95       	ret

00000734 <__fp_nan>:
 734:	9f ef       	ldi	r25, 0xFF	; 255
 736:	80 ec       	ldi	r24, 0xC0	; 192
 738:	08 95       	ret

0000073a <__fp_pscA>:
 73a:	00 24       	eor	r0, r0
 73c:	0a 94       	dec	r0
 73e:	16 16       	cp	r1, r22
 740:	17 06       	cpc	r1, r23
 742:	18 06       	cpc	r1, r24
 744:	09 06       	cpc	r0, r25
 746:	08 95       	ret

00000748 <__fp_pscB>:
 748:	00 24       	eor	r0, r0
 74a:	0a 94       	dec	r0
 74c:	12 16       	cp	r1, r18
 74e:	13 06       	cpc	r1, r19
 750:	14 06       	cpc	r1, r20
 752:	05 06       	cpc	r0, r21
 754:	08 95       	ret

00000756 <__fp_round>:
 756:	09 2e       	mov	r0, r25
 758:	03 94       	inc	r0
 75a:	00 0c       	add	r0, r0
 75c:	11 f4       	brne	.+4      	; 0x762 <__fp_round+0xc>
 75e:	88 23       	and	r24, r24
 760:	52 f0       	brmi	.+20     	; 0x776 <__fp_round+0x20>
 762:	bb 0f       	add	r27, r27
 764:	40 f4       	brcc	.+16     	; 0x776 <__fp_round+0x20>
 766:	bf 2b       	or	r27, r31
 768:	11 f4       	brne	.+4      	; 0x76e <__fp_round+0x18>
 76a:	60 ff       	sbrs	r22, 0
 76c:	04 c0       	rjmp	.+8      	; 0x776 <__fp_round+0x20>
 76e:	6f 5f       	subi	r22, 0xFF	; 255
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
