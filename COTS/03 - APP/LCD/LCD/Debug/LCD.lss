
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000520  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000520  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000121d  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dd  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000894  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a56  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eed  00000000  00000000  0000366a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 02 	call	0x4e8	; 0x4e8 <main>
  8a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enuInit>:
		}
	}
	
	return Local_u8ErrorStatus;

}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	d4 c0       	rjmp	.+424    	; 0x23e <DIO_enuInit+0x1ac>
  96:	98 2f       	mov	r25, r24
  98:	96 95       	lsr	r25
  9a:	96 95       	lsr	r25
  9c:	96 95       	lsr	r25
  9e:	28 2f       	mov	r18, r24
  a0:	27 70       	andi	r18, 0x07	; 7
  a2:	91 30       	cpi	r25, 0x01	; 1
  a4:	c9 f1       	breq	.+114    	; 0x118 <DIO_enuInit+0x86>
  a6:	38 f0       	brcs	.+14     	; 0xb6 <DIO_enuInit+0x24>
  a8:	92 30       	cpi	r25, 0x02	; 2
  aa:	09 f4       	brne	.+2      	; 0xae <DIO_enuInit+0x1c>
  ac:	66 c0       	rjmp	.+204    	; 0x17a <DIO_enuInit+0xe8>
  ae:	93 30       	cpi	r25, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_enuInit+0x22>
  b2:	94 c0       	rjmp	.+296    	; 0x1dc <DIO_enuInit+0x14a>
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <DIO_enuInit+0x1aa>
  b6:	48 2f       	mov	r20, r24
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	fa 01       	movw	r30, r20
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e8 58       	subi	r30, 0x88	; 136
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	90 81       	ld	r25, Z
  c6:	91 30       	cpi	r25, 0x01	; 1
  c8:	69 f4       	brne	.+26     	; 0xe4 <DIO_enuInit+0x52>
  ca:	9a b3       	in	r25, 0x1a	; 26
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	ba 01       	movw	r22, r20
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_enuInit+0x46>
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_enuInit+0x42>
  dc:	9b 01       	movw	r18, r22
  de:	29 2b       	or	r18, r25
  e0:	2a bb       	out	0x1a, r18	; 26
  e2:	ac c0       	rjmp	.+344    	; 0x23c <DIO_enuInit+0x1aa>
  e4:	9a b3       	in	r25, 0x1a	; 26
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	fb 01       	movw	r30, r22
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_enuInit+0x60>
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_enuInit+0x5c>
  f6:	9f 01       	movw	r18, r30
  f8:	6e 2f       	mov	r22, r30
  fa:	60 95       	com	r22
  fc:	96 23       	and	r25, r22
  fe:	9a bb       	out	0x1a, r25	; 26
 100:	44 0f       	add	r20, r20
 102:	55 1f       	adc	r21, r21
 104:	fa 01       	movw	r30, r20
 106:	e8 58       	subi	r30, 0x88	; 136
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	91 11       	cpse	r25, r1
 10e:	96 c0       	rjmp	.+300    	; 0x23c <DIO_enuInit+0x1aa>
 110:	9b b3       	in	r25, 0x1b	; 27
 112:	29 2b       	or	r18, r25
 114:	2b bb       	out	0x1b, r18	; 27
 116:	92 c0       	rjmp	.+292    	; 0x23c <DIO_enuInit+0x1aa>
 118:	48 2f       	mov	r20, r24
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	fa 01       	movw	r30, r20
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e8 58       	subi	r30, 0x88	; 136
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	90 81       	ld	r25, Z
 128:	91 30       	cpi	r25, 0x01	; 1
 12a:	69 f4       	brne	.+26     	; 0x146 <DIO_enuInit+0xb4>
 12c:	97 b3       	in	r25, 0x17	; 23
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	ba 01       	movw	r22, r20
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_enuInit+0xa8>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	2a 95       	dec	r18
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_enuInit+0xa4>
 13e:	9b 01       	movw	r18, r22
 140:	29 2b       	or	r18, r25
 142:	27 bb       	out	0x17, r18	; 23
 144:	7b c0       	rjmp	.+246    	; 0x23c <DIO_enuInit+0x1aa>
 146:	97 b3       	in	r25, 0x17	; 23
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	fb 01       	movw	r30, r22
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_enuInit+0xc2>
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	2a 95       	dec	r18
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_enuInit+0xbe>
 158:	9f 01       	movw	r18, r30
 15a:	6e 2f       	mov	r22, r30
 15c:	60 95       	com	r22
 15e:	96 23       	and	r25, r22
 160:	97 bb       	out	0x17, r25	; 23
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	fa 01       	movw	r30, r20
 168:	e8 58       	subi	r30, 0x88	; 136
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	91 81       	ldd	r25, Z+1	; 0x01
 16e:	91 11       	cpse	r25, r1
 170:	65 c0       	rjmp	.+202    	; 0x23c <DIO_enuInit+0x1aa>
 172:	98 b3       	in	r25, 0x18	; 24
 174:	29 2b       	or	r18, r25
 176:	28 bb       	out	0x18, r18	; 24
 178:	61 c0       	rjmp	.+194    	; 0x23c <DIO_enuInit+0x1aa>
 17a:	48 2f       	mov	r20, r24
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	fa 01       	movw	r30, r20
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e8 58       	subi	r30, 0x88	; 136
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	90 81       	ld	r25, Z
 18a:	91 30       	cpi	r25, 0x01	; 1
 18c:	69 f4       	brne	.+26     	; 0x1a8 <DIO_enuInit+0x116>
 18e:	94 b3       	in	r25, 0x14	; 20
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	ba 01       	movw	r22, r20
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_enuInit+0x10a>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	2a 95       	dec	r18
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_enuInit+0x106>
 1a0:	9b 01       	movw	r18, r22
 1a2:	29 2b       	or	r18, r25
 1a4:	24 bb       	out	0x14, r18	; 20
 1a6:	4a c0       	rjmp	.+148    	; 0x23c <DIO_enuInit+0x1aa>
 1a8:	94 b3       	in	r25, 0x14	; 20
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	fb 01       	movw	r30, r22
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_enuInit+0x124>
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	2a 95       	dec	r18
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_enuInit+0x120>
 1ba:	9f 01       	movw	r18, r30
 1bc:	6e 2f       	mov	r22, r30
 1be:	60 95       	com	r22
 1c0:	96 23       	and	r25, r22
 1c2:	94 bb       	out	0x14, r25	; 20
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	fa 01       	movw	r30, r20
 1ca:	e8 58       	subi	r30, 0x88	; 136
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	91 81       	ldd	r25, Z+1	; 0x01
 1d0:	91 11       	cpse	r25, r1
 1d2:	34 c0       	rjmp	.+104    	; 0x23c <DIO_enuInit+0x1aa>
 1d4:	95 b3       	in	r25, 0x15	; 21
 1d6:	29 2b       	or	r18, r25
 1d8:	25 bb       	out	0x15, r18	; 21
 1da:	30 c0       	rjmp	.+96     	; 0x23c <DIO_enuInit+0x1aa>
 1dc:	48 2f       	mov	r20, r24
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	fa 01       	movw	r30, r20
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	e8 58       	subi	r30, 0x88	; 136
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	90 81       	ld	r25, Z
 1ec:	91 30       	cpi	r25, 0x01	; 1
 1ee:	69 f4       	brne	.+26     	; 0x20a <DIO_enuInit+0x178>
 1f0:	91 b3       	in	r25, 0x11	; 17
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	ba 01       	movw	r22, r20
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_enuInit+0x16c>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	2a 95       	dec	r18
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_enuInit+0x168>
 202:	9b 01       	movw	r18, r22
 204:	29 2b       	or	r18, r25
 206:	21 bb       	out	0x11, r18	; 17
 208:	19 c0       	rjmp	.+50     	; 0x23c <DIO_enuInit+0x1aa>
 20a:	91 b3       	in	r25, 0x11	; 17
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	fb 01       	movw	r30, r22
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_enuInit+0x186>
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_enuInit+0x182>
 21c:	9f 01       	movw	r18, r30
 21e:	6e 2f       	mov	r22, r30
 220:	60 95       	com	r22
 222:	96 23       	and	r25, r22
 224:	91 bb       	out	0x11, r25	; 17
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	fa 01       	movw	r30, r20
 22c:	e8 58       	subi	r30, 0x88	; 136
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	91 11       	cpse	r25, r1
 234:	03 c0       	rjmp	.+6      	; 0x23c <DIO_enuInit+0x1aa>
 236:	92 b3       	in	r25, 0x12	; 18
 238:	29 2b       	or	r18, r25
 23a:	22 bb       	out	0x12, r18	; 18
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 32       	cpi	r24, 0x20	; 32
 240:	08 f4       	brcc	.+2      	; 0x244 <DIO_enuInit+0x1b2>
 242:	29 cf       	rjmp	.-430    	; 0x96 <DIO_enuInit+0x4>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret

00000248 <DIO_enuSetPin>:
 248:	80 32       	cpi	r24, 0x20	; 32
 24a:	08 f0       	brcs	.+2      	; 0x24e <DIO_enuSetPin+0x6>
 24c:	8b c0       	rjmp	.+278    	; 0x364 <DIO_enuSetPin+0x11c>
 24e:	98 2f       	mov	r25, r24
 250:	96 95       	lsr	r25
 252:	96 95       	lsr	r25
 254:	96 95       	lsr	r25
 256:	87 70       	andi	r24, 0x07	; 7
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	39 f1       	breq	.+78     	; 0x2aa <DIO_enuSetPin+0x62>
 25c:	38 f0       	brcs	.+14     	; 0x26c <DIO_enuSetPin+0x24>
 25e:	92 30       	cpi	r25, 0x02	; 2
 260:	09 f4       	brne	.+2      	; 0x264 <DIO_enuSetPin+0x1c>
 262:	42 c0       	rjmp	.+132    	; 0x2e8 <DIO_enuSetPin+0xa0>
 264:	93 30       	cpi	r25, 0x03	; 3
 266:	09 f4       	brne	.+2      	; 0x26a <DIO_enuSetPin+0x22>
 268:	5e c0       	rjmp	.+188    	; 0x326 <DIO_enuSetPin+0xde>
 26a:	7e c0       	rjmp	.+252    	; 0x368 <DIO_enuSetPin+0x120>
 26c:	61 30       	cpi	r22, 0x01	; 1
 26e:	71 f4       	brne	.+28     	; 0x28c <DIO_enuSetPin+0x44>
 270:	4b b3       	in	r20, 0x1b	; 27
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_enuSetPin+0x36>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_enuSetPin+0x32>
 282:	cb 01       	movw	r24, r22
 284:	84 2b       	or	r24, r20
 286:	8b bb       	out	0x1b, r24	; 27
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
 28c:	4b b3       	in	r20, 0x1b	; 27
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuSetPin+0x52>
 296:	66 0f       	add	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	8a 95       	dec	r24
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuSetPin+0x4e>
 29e:	cb 01       	movw	r24, r22
 2a0:	80 95       	com	r24
 2a2:	84 23       	and	r24, r20
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	71 f4       	brne	.+28     	; 0x2ca <DIO_enuSetPin+0x82>
 2ae:	48 b3       	in	r20, 0x18	; 24
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	b9 01       	movw	r22, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_enuSetPin+0x74>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	8a 95       	dec	r24
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_enuSetPin+0x70>
 2c0:	cb 01       	movw	r24, r22
 2c2:	84 2b       	or	r24, r20
 2c4:	88 bb       	out	0x18, r24	; 24
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
 2ca:	48 b3       	in	r20, 0x18	; 24
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_enuSetPin+0x90>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_enuSetPin+0x8c>
 2dc:	cb 01       	movw	r24, r22
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	88 bb       	out	0x18, r24	; 24
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
 2e8:	61 30       	cpi	r22, 0x01	; 1
 2ea:	71 f4       	brne	.+28     	; 0x308 <DIO_enuSetPin+0xc0>
 2ec:	45 b3       	in	r20, 0x15	; 21
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	b9 01       	movw	r22, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_enuSetPin+0xb2>
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	8a 95       	dec	r24
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_enuSetPin+0xae>
 2fe:	cb 01       	movw	r24, r22
 300:	84 2b       	or	r24, r20
 302:	85 bb       	out	0x15, r24	; 21
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	08 95       	ret
 308:	45 b3       	in	r20, 0x15	; 21
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_enuSetPin+0xce>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_enuSetPin+0xca>
 31a:	cb 01       	movw	r24, r22
 31c:	80 95       	com	r24
 31e:	84 23       	and	r24, r20
 320:	85 bb       	out	0x15, r24	; 21
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
 326:	61 30       	cpi	r22, 0x01	; 1
 328:	71 f4       	brne	.+28     	; 0x346 <DIO_enuSetPin+0xfe>
 32a:	42 b3       	in	r20, 0x12	; 18
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_enuSetPin+0xf0>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	8a 95       	dec	r24
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_enuSetPin+0xec>
 33c:	cb 01       	movw	r24, r22
 33e:	84 2b       	or	r24, r20
 340:	82 bb       	out	0x12, r24	; 18
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
 346:	42 b3       	in	r20, 0x12	; 18
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	b9 01       	movw	r22, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_enuSetPin+0x10c>
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	8a 95       	dec	r24
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_enuSetPin+0x108>
 358:	cb 01       	movw	r24, r22
 35a:	80 95       	com	r24
 35c:	84 23       	and	r24, r20
 35e:	82 bb       	out	0x12, r24	; 18
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	08 95       	ret
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret

0000036c <DIO_enuSetPort>:
DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;

	 switch (Copy_u8Port)
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	61 f0       	breq	.+24     	; 0x388 <DIO_enuSetPort+0x1c>
 370:	28 f0       	brcs	.+10     	; 0x37c <DIO_enuSetPort+0x10>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	79 f0       	breq	.+30     	; 0x394 <DIO_enuSetPort+0x28>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	99 f0       	breq	.+38     	; 0x3a0 <DIO_enuSetPort+0x34>
 37a:	18 c0       	rjmp	.+48     	; 0x3ac <DIO_enuSetPort+0x40>
		{
			case (DIO_PORTA):
			PORTA = 0;
 37c:	1b ba       	out	0x1b, r1	; 27
			PORTA |= Copy_u8Value;
 37e:	8b b3       	in	r24, 0x1b	; 27
 380:	68 2b       	or	r22, r24
 382:	6b bb       	out	0x1b, r22	; 27


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 384:	80 e0       	ldi	r24, 0x00	; 0
	 switch (Copy_u8Port)
		{
			case (DIO_PORTA):
			PORTA = 0;
			PORTA |= Copy_u8Value;
			break;
 386:	08 95       	ret
			case (DIO_PORTB):
			PORTB = 0;
 388:	18 ba       	out	0x18, r1	; 24
			PORTB |= Copy_u8Value;
 38a:	88 b3       	in	r24, 0x18	; 24
 38c:	68 2b       	or	r22, r24
 38e:	68 bb       	out	0x18, r22	; 24


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 390:	80 e0       	ldi	r24, 0x00	; 0
			PORTA |= Copy_u8Value;
			break;
			case (DIO_PORTB):
			PORTB = 0;
			PORTB |= Copy_u8Value;
			break;
 392:	08 95       	ret
			case (DIO_PORTC):
			PORTC = 0;
 394:	15 ba       	out	0x15, r1	; 21
			PORTC |= Copy_u8Value;
 396:	85 b3       	in	r24, 0x15	; 21
 398:	68 2b       	or	r22, r24
 39a:	65 bb       	out	0x15, r22	; 21


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 39c:	80 e0       	ldi	r24, 0x00	; 0
			PORTB |= Copy_u8Value;
			break;
			case (DIO_PORTC):
			PORTC = 0;
			PORTC |= Copy_u8Value;
			break;
 39e:	08 95       	ret
			case (DIO_PORTD):
			PORTD = 0;
 3a0:	12 ba       	out	0x12, r1	; 18
			PORTD |= Copy_u8Value;
 3a2:	82 b3       	in	r24, 0x12	; 18
 3a4:	68 2b       	or	r22, r24
 3a6:	62 bb       	out	0x12, r22	; 18


DIO_tenuErrorStatus DIO_enuSetPort( u8 Copy_u8Port , u8 Copy_u8Value)
{

	DIO_tenuErrorStatus Local_u8ErrorStatus = DIO_enuOk;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
			PORTC |= Copy_u8Value;
			break;
			case (DIO_PORTD):
			PORTD = 0;
			PORTD |= Copy_u8Value;
			break;
 3aa:	08 95       	ret
			default:
			Local_u8ErrorStatus = DIO_enuNotOk;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	return Local_u8ErrorStatus;	

 3ae:	08 95       	ret

000003b0 <LCD_WriteData>:
#define LCD_CLEAR_DISP            0b00000001
#define CGRAM_BLOCK_NUM           8
#define MAX_Y_POS                 16

LCD_enuErrorStatus_t LCD_WriteData(u8 Copy_u8Data)
{
 3b0:	cf 93       	push	r28
 3b2:	c8 2f       	mov	r28, r24
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else
	{
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin16,LCD_enuHigh);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin17,LCD_enuLow);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	81 e1       	ldi	r24, 0x11	; 17
 3c0:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>
		Local_enuErrorStatus = DIO_enuSetPort(LCD_DATA_PORT,Copy_u8Data);
 3c4:	6c 2f       	mov	r22, r28
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_enuSetPort>
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin18 , LCD_enuHigh);
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	82 e1       	ldi	r24, 0x12	; 18
 3d0:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d4:	83 ef       	ldi	r24, 0xF3	; 243
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCD_WriteData+0x28>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCD_WriteData+0x2e>
 3de:	00 00       	nop
		_delay_ms(2);
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin18 , LCD_enuLow);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	82 e1       	ldi	r24, 0x12	; 18
 3e4:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>

	}
	return Local_enuErrorStatus;
	

}
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <LCD_WriteCommand>:
LCD_enuErrorStatus_t LCD_WriteCommand(u8 Copy_u8Command)
{
 3ec:	cf 93       	push	r28
 3ee:	c8 2f       	mov	r28, r24
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else
	{
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin16,LCD_enuLow);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e1       	ldi	r24, 0x10	; 16
 3f4:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin17,LCD_enuLow);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	81 e1       	ldi	r24, 0x11	; 17
 3fc:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>
		Local_enuErrorStatus = DIO_enuSetPort(LCD_DATA_PORT,Copy_u8Command);
 400:	6c 2f       	mov	r22, r28
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_enuSetPort>
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin18 , LCD_enuHigh);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	82 e1       	ldi	r24, 0x12	; 18
 40c:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>
 410:	83 ef       	ldi	r24, 0xF3	; 243
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
		_delay_ms(2);
		Local_enuErrorStatus = DIO_enuSetPin(LCD_enuPin18 , LCD_enuLow);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	82 e1       	ldi	r24, 0x12	; 18
 420:	0e 94 24 01 	call	0x248	; 0x248 <DIO_enuSetPin>
	}
	return Local_enuErrorStatus;

}
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <LCD_Init>:
 428:	8f e0       	ldi	r24, 0x0F	; 15
 42a:	97 e2       	ldi	r25, 0x27	; 39
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <LCD_Init+0x4>
 430:	00 c0       	rjmp	.+0      	; 0x432 <LCD_Init+0xa>
 432:	00 00       	nop
void LCD_Init()
{
	_delay_ms(40);
	/* Function set command */
	LCD_WriteCommand(FUNC_SET_COMMAND);
 434:	88 e3       	ldi	r24, 0x38	; 56
 436:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_WriteCommand>
	/*Display powered on*/
	LCD_WriteCommand(LCD_DISP_ON);
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_WriteCommand>
	/* Clear Display*/
	LCD_WriteCommand(LCD_CLEAR_DISP);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_WriteCommand>
 446:	08 95       	ret

00000448 <LCD_GotoXY>:
}
LCD_enuErrorStatus_t LCD_GotoXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
	LCD_enuErrorStatus_t Local_enuErrorStatus = LCD_enuOk;
	u8 Local_u8Location = 0;
	if( (Copy_u8XPos != XPOS_FIRST_ROW) && (Copy_u8XPos != XPOS_SECOND_ROW) )
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	78 f4       	brcc	.+30     	; 0x46a <LCD_GotoXY+0x22>
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else if( Copy_u8YPos > MAX_Y_POS )
 44c:	61 31       	cpi	r22, 0x11	; 17
 44e:	78 f4       	brcc	.+30     	; 0x46e <LCD_GotoXY+0x26>
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else
	{
		if( Copy_u8XPos == XPOS_FIRST_ROW )
 450:	88 23       	and	r24, r24
 452:	29 f0       	breq	.+10     	; 0x45e <LCD_GotoXY+0x16>
		{
			Local_u8Location = Copy_u8YPos;
		}
		else if( Copy_u8XPos == XPOS_SECOND_ROW )
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	11 f4       	brne	.+4      	; 0x45c <LCD_GotoXY+0x14>
		{
			Local_u8Location = Copy_u8YPos + 0x40;
 458:	60 5c       	subi	r22, 0xC0	; 192
 45a:	01 c0       	rjmp	.+2      	; 0x45e <LCD_GotoXY+0x16>

}
LCD_enuErrorStatus_t LCD_GotoXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
	LCD_enuErrorStatus_t Local_enuErrorStatus = LCD_enuOk;
	u8 Local_u8Location = 0;
 45c:	60 e0       	ldi	r22, 0x00	; 0
		else if( Copy_u8XPos == XPOS_SECOND_ROW )
		{
			Local_u8Location = Copy_u8YPos + 0x40;
		}
		else{}
		LCD_WriteCommand(Local_u8Location+128);
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	86 0f       	add	r24, r22
 462:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_WriteCommand>
	LCD_WriteCommand(LCD_CLEAR_DISP);

}
LCD_enuErrorStatus_t LCD_GotoXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
	LCD_enuErrorStatus_t Local_enuErrorStatus = LCD_enuOk;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	08 95       	ret
	u8 Local_u8Location = 0;
	if( (Copy_u8XPos != XPOS_FIRST_ROW) && (Copy_u8XPos != XPOS_SECOND_ROW) )
	{
		Local_enuErrorStatus = LCD_enuNotOk;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	08 95       	ret
	}
	else if( Copy_u8YPos > MAX_Y_POS )
	{
		Local_enuErrorStatus = LCD_enuNotOk;
 46e:	81 e0       	ldi	r24, 0x01	; 1
		LCD_WriteCommand(Local_u8Location+128);
	}
	return Local_enuErrorStatus;


}
 470:	08 95       	ret

00000472 <LCD_DisplaySpecialCahar>:
LCD_enuErrorStatus_t LCD_DisplaySpecialCahar(u8 * Add_Pattern , u8 Copy_u8Block , u8 Copy_u8XPos , u8 Copy_u8YPos )
{
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
	LCD_enuErrorStatus_t Local_enuErrorStatus = LCD_enuOk;
	u8 Local_u8CGRamAddress = 0;
	u8 Local_u8Iterator = 0;
	if( Add_Pattern == NULL )
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	29 f1       	breq	.+74     	; 0x4cc <LCD_DisplaySpecialCahar+0x5a>
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else if( Copy_u8Block > CGRAM_BLOCK_NUM )
 482:	69 30       	cpi	r22, 0x09	; 9
 484:	28 f5       	brcc	.+74     	; 0x4d0 <LCD_DisplaySpecialCahar+0x5e>
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else if( (Copy_u8XPos != XPOS_FIRST_ROW) && (Copy_u8XPos != XPOS_SECOND_ROW) )
 486:	42 30       	cpi	r20, 0x02	; 2
 488:	28 f5       	brcc	.+74     	; 0x4d4 <LCD_DisplaySpecialCahar+0x62>
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else if( Copy_u8YPos > MAX_Y_POS )
 48a:	21 31       	cpi	r18, 0x11	; 17
 48c:	28 f5       	brcc	.+74     	; 0x4d8 <LCD_DisplaySpecialCahar+0x66>
 48e:	e2 2e       	mov	r14, r18
 490:	f4 2e       	mov	r15, r20
 492:	06 2f       	mov	r16, r22
 494:	ec 01       	movw	r28, r24
	{
		Local_enuErrorStatus = LCD_enuNotOk;
	}
	else
	{
		Local_u8CGRamAddress = Copy_u8Block * CGRAM_BLOCK_NUM;
 496:	86 2f       	mov	r24, r22
 498:	88 0f       	add	r24, r24
 49a:	88 0f       	add	r24, r24
 49c:	88 0f       	add	r24, r24

		LCD_WriteCommand( Local_u8CGRamAddress + 64 );
 49e:	80 5c       	subi	r24, 0xC0	; 192
 4a0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_WriteCommand>

		for(Local_u8Iterator = 0 ; Local_u8Iterator < CGRAM_BLOCK_NUM ; Local_u8Iterator++ )
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <LCD_DisplaySpecialCahar+0x44>
		{
			LCD_WriteData(Add_Pattern[Local_u8Iterator]);
 4a8:	fe 01       	movw	r30, r28
 4aa:	e1 0f       	add	r30, r17
 4ac:	f1 1d       	adc	r31, r1
 4ae:	80 81       	ld	r24, Z
 4b0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCD_WriteData>
	{
		Local_u8CGRamAddress = Copy_u8Block * CGRAM_BLOCK_NUM;

		LCD_WriteCommand( Local_u8CGRamAddress + 64 );

		for(Local_u8Iterator = 0 ; Local_u8Iterator < CGRAM_BLOCK_NUM ; Local_u8Iterator++ )
 4b4:	1f 5f       	subi	r17, 0xFF	; 255
 4b6:	18 30       	cpi	r17, 0x08	; 8
 4b8:	b8 f3       	brcs	.-18     	; 0x4a8 <LCD_DisplaySpecialCahar+0x36>
		{
			LCD_WriteData(Add_Pattern[Local_u8Iterator]);
		}
		LCD_GotoXY( Copy_u8XPos , Copy_u8YPos );
 4ba:	6e 2d       	mov	r22, r14
 4bc:	8f 2d       	mov	r24, r15
 4be:	0e 94 24 02 	call	0x448	; 0x448 <LCD_GotoXY>

		LCD_WriteData(Copy_u8Block);
 4c2:	80 2f       	mov	r24, r16
 4c4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCD_WriteData>


}
LCD_enuErrorStatus_t LCD_DisplaySpecialCahar(u8 * Add_Pattern , u8 Copy_u8Block , u8 Copy_u8XPos , u8 Copy_u8YPos )
{
	LCD_enuErrorStatus_t Local_enuErrorStatus = LCD_enuOk;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	07 c0       	rjmp	.+14     	; 0x4da <LCD_DisplaySpecialCahar+0x68>
	u8 Local_u8CGRamAddress = 0;
	u8 Local_u8Iterator = 0;
	if( Add_Pattern == NULL )
	{
		Local_enuErrorStatus = LCD_enuNotOk;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <LCD_DisplaySpecialCahar+0x68>
	}
	else if( Copy_u8Block > CGRAM_BLOCK_NUM )
	{
		Local_enuErrorStatus = LCD_enuNotOk;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	03 c0       	rjmp	.+6      	; 0x4da <LCD_DisplaySpecialCahar+0x68>
	}
	else if( (Copy_u8XPos != XPOS_FIRST_ROW) && (Copy_u8XPos != XPOS_SECOND_ROW) )
	{
		Local_enuErrorStatus = LCD_enuNotOk;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <LCD_DisplaySpecialCahar+0x68>
	}
	else if( Copy_u8YPos > MAX_Y_POS )
	{
		Local_enuErrorStatus = LCD_enuNotOk;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_enuErrorStatus;
	


}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	08 95       	ret

000004e8 <main>:
//u8 Local_u8Arr3[8] = {0, 0, 21, 21, 31, 31, 0, 0};
//u8 Local_u8Arr4[8] = {2, 0, 7, 5, 31, 31, 0, 0};

int main(void)
{
	    DIO_enuInit();
 4e8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuInit>
	    LCD_Init();
 4ec:	0e 94 14 02 	call	0x428	; 0x428 <LCD_Init>
        LCD_DisplaySpecialCahar(Glob_u8Arr1 , 0 , 0 , 15);
 4f0:	2f e0       	ldi	r18, 0x0F	; 15
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	80 e7       	ldi	r24, 0x70	; 112
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 39 02 	call	0x472	; 0x472 <LCD_DisplaySpecialCahar>
        LCD_DisplaySpecialCahar(Glob_u8Arr2 , 1 , 1 , 0);
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	88 e6       	ldi	r24, 0x68	; 104
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 39 02 	call	0x472	; 0x472 <LCD_DisplaySpecialCahar>
        LCD_DisplaySpecialCahar(Glob_u8Ball , 2 , 1 , 14);
 50c:	2e e0       	ldi	r18, 0x0E	; 14
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	80 e6       	ldi	r24, 0x60	; 96
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 39 02 	call	0x472	; 0x472 <LCD_DisplaySpecialCahar>
 51a:	ff cf       	rjmp	.-2      	; 0x51a <main+0x32>

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
